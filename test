<!DOCTYPE html>

<html lang="en" data-theme="light">

<head>

    <meta charset="UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">

    <title>Everley's Sloan Ascent</title>

    <script src="https://cdn.tailwindcss.com"></script>

    <script src="https://unpkg.com/lucide@latest"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <style>

        :root {

            --bg-main: #FDFBF7; --bg-secondary: #F5F0E8; --bg-widget: #FFFFFF;

            --text-primary: #4A3728; --text-secondary: #9B8E81;

            --accent-primary: #FF7B54; --accent-secondary: #58A4B0; --accent-tertiary: #F7C5A8;

            --border-color: #EAE2D8; --shadow-color: rgba(74, 55, 40, 0.08);

            --success-color: #58A4B0; --danger-color: #E57373;

            --font-heading: 'Lora', serif; --font-body: 'Inter', sans-serif;

            --bg-main-rgb: 253, 251, 247;

            --focus-bg: #fffbeb;

            --break-bg: #f0f9ff;

            --rarity-common: #9B8E81; --rarity-uncommon: #58A4B0; --rarity-rare: #6366F1; --rarity-epic: #A855F7;

        }



        [data-theme="dark"] {

            --bg-main: #191B28; --bg-secondary: #24283B; --bg-widget: #1F2232;

            --text-primary: #E8E9F3; --text-secondary: #8A91B4;

            --accent-primary: #FF9A6C; --accent-secondary: #7FD8D0; --accent-tertiary: #52476A;

            --border-color: #3A3F5E; --shadow-color: rgba(0, 0, 0, 0.2);

            --success-color: #7FD8D0; --danger-color: #EF9A9A;

            --bg-main-rgb: 25, 27, 40;

            --focus-bg: #2b2118;

            --break-bg: #1e293b;

            --rarity-common: #8A91B4; --rarity-uncommon: #7FD8D0; --rarity-rare: #818CF8; --rarity-epic: #C084FC;

        }



        [data-theme="inkopolis"] {

            --bg-main: #1E1E2E; --bg-secondary: #2D2D44; --bg-widget: #252538;

            --text-primary: #F0F0FF; --text-secondary: #A0A0C0;

            --accent-primary: #FE5F9F; --accent-secondary: #00E5B8; --accent-tertiary: #E6E600;

            --border-color: #4D4D66; --shadow-color: rgba(0, 0, 0, 0.3);

            --bg-main-rgb: 30, 30, 46;

        }

        

        [data-theme="stardew"] {

            --bg-main: #FFFBEA; --bg-secondary: #FAEED1; --bg-widget: #FFFFFF;

            --text-primary: #6B4F31; --text-secondary: #A08C6E;

            --accent-primary: #FAB429; --accent-secondary: #87C039; --accent-tertiary: #FFDDA2;

            --border-color: #EAE2D8; --shadow-color: rgba(107, 79, 49, 0.1);

            --bg-main-rgb: 255, 251, 234;

        }



        [data-theme="baldurs-gate"] {

            --bg-main: #24211D; --bg-secondary: #3D3831; --bg-widget: #2F2B26;

            --text-primary: #D7C6B3; --text-secondary: #8F8170;

            --accent-primary: #C59B6C; --accent-secondary: #8B1B1B; --accent-tertiary: #5C4A3A;

            --border-color: #5C4A3A; --shadow-color: rgba(0, 0, 0, 0.4);

            --bg-main-rgb: 36, 33, 29;

        }

        

        [data-theme="fox-den"] {

            --bg-main: #FFF8F0; --bg-secondary: #FFEFE0; --bg-widget: #FFFFFF;

            --text-primary: #5C3A21; --text-secondary: #A18D7E;

            --accent-primary: #E67A41; --accent-secondary: #F0A37E; --accent-tertiary: #FFD6BB;

            --border-color: #F5DACE; --shadow-color: rgba(230, 122, 65, 0.1);

            --bg-main-rgb: 255, 248, 240;

        }



        /* General Styling */

        html, body { height: 100%; margin: 0; padding: 0; overflow: hidden; background-color: #1a1a1a; }

        body { font-family: var(--font-body); display: flex; align-items: center; justify-content: center; -webkit-tap-highlight-color: transparent; transition: background-color 0.3s ease; }

        #phone-screen {

            width: 100%; max-width: 420px; height: 100%; max-height: 840px; aspect-ratio: 9 / 17;

            background-color: var(--bg-main); border: 8px solid #0a0a0a; border-radius: 40px;

            box-shadow: 0 10px 40px rgba(0,0,0,0.3), inset 0 0 0 2px #333;

            display: flex; flex-direction: column; position: relative; overflow: hidden;

            transition: background-color 0.3s ease, color 0.3s ease; color: var(--text-primary);

        }



        /* Scrollbar */

        ::-webkit-scrollbar { width: 5px; }

        ::-webkit-scrollbar-track { background: transparent; }

        ::-webkit-scrollbar-thumb { background: var(--accent-secondary); border-radius: 4px; }



        /* Animations */

        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }

        @keyframes popIn { from { opacity: 0; transform: scale(0.9); } to { opacity: 1; transform: scale(1); } }

        @keyframes spin { to { transform: rotate(360deg); } }

        @keyframes pop-and-fade {

            0% { transform: translateY(0) scale(0.9); opacity: 1; }

            100% { transform: translateY(-40px) scale(1.1); opacity: 0; }

        }

        @keyframes pulse-border {

            0% { box-shadow: 0 0 0 0 rgba(88, 164, 176, 0.7); }

            70% { box-shadow: 0 0 0 10px rgba(88, 164, 176, 0); }

            100% { box-shadow: 0 0 0 0 rgba(88, 164, 176, 0); }

        }

        @keyframes gacha-reveal {

            0% { transform: scale(0.5) rotate(-15deg); opacity: 0; }

            60% { transform: scale(1.1) rotate(10deg); opacity: 1; }

            100% { transform: scale(1) rotate(0deg); opacity: 1; }

        }

        .timer-finished-pulse {

            animation: pulse-border 1.5s ease-out;

        }

        .flow-state-active {

            animation: pulse-border 2s infinite;

        }



        /* Main Layout */

        #hud, #bottom-nav { z-index: 10; background-color: rgba(var(--bg-main-rgb), 0.7); backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px); border-color: var(--border-color); transition: all 0.3s ease; }

        #content-area { flex-grow: 1; overflow-y: auto; scroll-behavior: smooth; }

        .page { animation: fadeIn 0.4s ease-out; }



        /* HUD */

        #hud { padding: 1rem; border-bottom-width: 1px; }

        #hud h1 { font-family: var(--font-heading); font-weight: 700; font-size: 1.5rem; }

        #player-level { font-family: var(--font-body); font-weight: 600; color: var(--accent-primary); letter-spacing: 0.5px; }

        #system-time { font-family: var(--font-body); font-weight: 700; letter-spacing: -0.5px; }

        #system-date { font-size: 0.7rem; color: var(--text-secondary); }

        .hud-gp-display { background: linear-gradient(135deg, var(--accent-tertiary), var(--accent-primary)); color: white; padding: 0.25rem 0.75rem; border-radius: 9999px; box-shadow: 0 2px 8px rgba(255,123,84,0.3); }

        #gp-popup-container, #exp-popup-container { position: absolute; right: 0; width: 100px; text-align: center; }

        .stat-popup { position: absolute; right: 0; left: 0; margin: auto; font-size: 1.1rem; font-weight: 700; animation: pop-and-fade 1.5s ease-out forwards; }

        .progress-bar-bg { background-color: var(--bg-secondary); border-radius: 9999px; overflow: hidden; box-shadow: inset 0 1px 3px rgba(0,0,0,0.05); }

        .progress-bar-fill { transition: width 0.5s ease-in-out; background-size: 200% 200%; }

        #hp-bar { background: linear-gradient(45deg, #F87171, #DC2626); }

        #exp-bar { background: linear-gradient(45deg, #FBBF24, #F59E0B); }



        /* Bottom Nav */

        #bottom-nav { border-top-width: 1px; }

        .nav-button { color: var(--text-secondary); transition: all 0.2s ease; position: relative; }

        .nav-button.active { color: var(--accent-primary); transform: translateY(-2px); }

        .nav-button.active::after {

            content: ''; position: absolute; bottom: 2px; left: 50%; transform: translateX(-50%);

            width: 6px; height: 6px; background-color: var(--accent-primary); border-radius: 50%;

        }

        .nav-button:hover { color: var(--accent-primary); }



        /* Cards & Buttons */

        .cozy-card { background-color: var(--bg-widget); border: 1px solid var(--border-color); border-radius: 1.5rem; box-shadow: 0 4px 20px var(--shadow-color); transition: all 0.3s ease; padding: 1.5rem; }

        .cozy-button {

            background: linear-gradient(45deg, var(--accent-primary), var(--accent-tertiary));

            color: white; border-radius: 0.75rem; padding: 0.75rem 1.5rem; font-weight: 600;

            transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(255, 123, 84, 0.2); border: none; cursor: pointer;

        }

        .cozy-button:hover { transform: translateY(-3px) scale(1.02); box-shadow: 0 6px 16px rgba(255, 123, 84, 0.3); }

        .cozy-button:active { transform: translateY(-1px) scale(0.98); }

        .cozy-button:disabled { background: var(--bg-secondary); color: var(--text-secondary); box-shadow: none; cursor: not-allowed; transform: none; opacity: 0.6; }

        

        /* Floating Action Button */

        .fab {

            position: absolute;

            z-index: 20;

            width: 56px; height: 56px; border-radius: 50%; display: flex;

            align-items: center; justify-content: center; color: white;

            background: linear-gradient(45deg, var(--accent-secondary), #81C7D4);

            box-shadow: 0 6px 16px rgba(88, 164, 176, 0.4);

            transition: all 0.2s ease-out; border: none;

            cursor: grab;

        }

        .fab:active {

            cursor: grabbing;

        }

        .fab:hover { transform: scale(1.1) rotate(15deg); box-shadow: 0 8px 20px rgba(88, 164, 176, 0.5); }





        /* Form Elements */

        .styled-input, .styled-select, .styled-textarea {

            width: 100%; padding: 0.65rem; font-size: 0.9rem; border-radius: 0.5rem;

            background-color: var(--bg-secondary); border: 1px solid var(--border-color);

            color: var(--text-primary); transition: all 0.2s ease;

        }

        .styled-input:focus, .styled-select:focus, .styled-textarea:focus {

            outline: none; border-color: var(--accent-primary);

            box-shadow: 0 0 0 3px rgba(255, 123, 84, 0.2);

        }

        .styled-textarea { min-height: 100px; }



        /* Quests Tab */

        #daily-modifier { background: linear-gradient(45deg, var(--accent-primary), var(--accent-secondary)); color: white; }

        .quest-category-title { font-family: var(--font-heading); color: var(--text-primary); padding-bottom: 0.25rem; margin-bottom: 0.75rem; border-bottom: 2px solid var(--accent-tertiary); }

        .quest-item {

            background-color: var(--bg-widget); border: 1px solid var(--border-color);

            padding: 0.75rem 1rem; border-radius: 1rem; transition: all 0.3s ease;

            box-shadow: 0 2px 8px var(--shadow-color);

        }

        .quest-item.priority-high { border-left-width: 4px; border-left-color: var(--danger-color); }

        .quest-item.priority-medium { border-left-width: 4px; border-left-color: var(--accent-primary); }

        .quest-container .quest-checkbox:checked + .quest-item { background-color: var(--bg-secondary); border-color: var(--accent-secondary); }

        .quest-container .quest-checkbox:checked + .quest-item .quest-title { text-decoration: line-through; color: var(--text-secondary); }

        .quest-container .quest-checkbox:checked + .quest-item .custom-checkbox { background-color: var(--accent-secondary); border-color: var(--accent-secondary); transform: scale(1.1); }

        .quest-container .quest-checkbox:checked + .quest-item .custom-checkbox::after { opacity: 1; transform: rotate(45deg) scale(1); }

        .custom-checkbox {

            width: 22px; height: 22px; border: 2px solid var(--border-color);

            border-radius: 6px; flex-shrink: 0; display: flex; align-items: center; justify-content: center;

            transition: all 0.2s ease; position: relative;

        }

        .custom-checkbox::after { content: ''; width: 6px; height: 12px; border: solid white; border-width: 0 3px 3px 0; opacity: 0; transform: rotate(45deg) scale(0.5); transition: all 0.2s ease-out; }

        .quest-reward-bubble { background-color: var(--accent-secondary); color: white; }

        .subtask-checkbox:checked + label div { background-color: var(--accent-secondary); border-color: var(--accent-secondary); }

        .subtask-checkbox:checked + label span { text-decoration: line-through; color: var(--text-secondary); }

        

        /* Recurring Quests */

        .quest-view-tab { color: var(--text-secondary); border-color: transparent; }

        .quest-view-tab.active { color: var(--accent-primary); border-color: var(--accent-primary); }



        /* Mastery Tracks (Goals Tab) */

        .milestone-item { border-left: 2px solid var(--border-color); padding-left: 0.75rem; }

        .milestone-item.completed { border-left-color: var(--success-color); }

        .milestone-item.completed span { text-decoration: line-through; color: var(--text-secondary); }

        

        /* Profile Tab */

        .skill-bar { background-color: var(--bg-secondary); height: 12px; border-radius: 6px; overflow: hidden; }

        .skill-bar-fill { background: linear-gradient(90deg, var(--accent-tertiary), var(--accent-secondary)); height: 100%; transition: width 0.5s ease; }

        .theme-toggle-btn { background-color: var(--bg-secondary); color: var(--text-secondary); transition: all 0.2s ease; }

        .theme-toggle-btn.active { background-color: var(--accent-primary); color: white; }

        .theme-toggle-btn:hover { transform: scale(1.1) rotate(15deg); }

        .stat-item .stat-value { color: var(--accent-primary); font-weight: 700; }

        .inventory-item, .relic-item { cursor: pointer; }

        .inventory-item:hover .inventory-icon, .relic-item:hover .relic-icon { transform: scale(1.15); }

        .relic-cooldown { position: absolute; top:0; right: 0; background-color: rgba(0,0,0,0.6); color: white; font-size: 0.6rem; padding: 1px 3px; border-radius: 4px;}



        /* Modals */

        #notification-modal { transition: opacity 0.3s ease, background-color 0.5s; opacity: 0; pointer-events: none; }

        #notification-modal.visible { opacity: 1; pointer-events: auto; }

        #notification-modal.focus-mode { background-color: var(--focus-bg); }

        #notification-modal.break-mode { background-color: var(--break-bg); }

        .modal-backdrop { position: fixed; inset: 0; background-color: rgba(0,0,0,0.5); backdrop-filter: blur(4px); -webkit-backdrop-filter: blur(4px); }

        #modal-content { z-index: 1; animation: popIn 0.3s ease-out forwards; }

        .modal-icon {

            width: 64px; height: 64px; margin-left: auto; margin-right: auto;

            border-radius: 50%; display: flex; align-items: center; justify-content: center;

            background: linear-gradient(135deg, var(--accent-tertiary), var(--accent-primary));

            color: white; font-size: 2rem; margin-bottom: 1rem;

        }



        /* Gachapon */

        .gacha-reveal-item { animation: gacha-reveal 0.8s cubic-bezier(0.34, 1.56, 0.64, 1) forwards; }

        .rarity-label { font-weight: 700; text-transform: uppercase; letter-spacing: 1px; }

        .rarity-common { color: var(--rarity-common); }

        .rarity-uncommon { color: var(--rarity-uncommon); }

        .rarity-rare { color: var(--rarity-rare); }

        .rarity-epic { color: var(--rarity-epic); }





        /* Focus Chamber */

        .focus-tab { color: var(--text-secondary); border-color: transparent; font-weight: 600; padding: 0.5rem 0.75rem; border-bottom-width: 2px; flex-grow: 1; }

        .focus-tab.active { color: var(--accent-primary); border-color: var(--accent-primary); }





        /* Agenda / Calendar */

        .calendar-day.selected { background-color: var(--accent-primary) !important; color: white !important; font-weight: bold; }

        .calendar-day:not(.selected):hover { background-color: var(--bg-secondary); }

        #timeline-container { margin-left: 2.5rem; }

        .event-dots { display: flex; justify-content: center; gap: 2px; position: absolute; bottom: 2px; left: 0; right: 0; }

        .event-dot { width: 4px; height: 4px; border-radius: 50%; }



        /* Treasury Tab */

        .transaction-form-tab.active { color: var(--accent-primary); border-color: var(--accent-primary); }



        /* Mind Palace */

        .mind-palace-tag { background-color: var(--accent-secondary); color: white; }

        

        /* Quest Chain */

        .quest-chain-step {

            position: relative; padding-left: 20px;

        }

        .quest-chain-step:not(:last-child) {

            padding-bottom: 1rem; border-left: 2px solid var(--border-color);

        }

        .quest-chain-step::before {

            content: ''; position: absolute; left: -9px; top: 0;

            width: 16px; height: 16px; border-radius: 50%;

            background-color: var(--bg-secondary); border: 2px solid var(--border-color);

        }

        .quest-chain-step.completed::before {

            background-color: var(--success-color); border-color: var(--success-color);

            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M9 16.17l-3.59-3.59L4 14l5 5 9-9-1.41-1.41z'/%3E%3C/svg%3E");

        }

        .quest-chain-step.active::before {

            border-color: var(--accent-primary);

        }





        /* Loading Spinner */

        #loading-overlay { z-index: 999; background-color: rgba(var(--bg-main-rgb), 0.8); backdrop-filter: blur(4px); transition: opacity 0.3s ease; }

        .spinner { border-top-color: var(--accent-primary); animation: spin 1s ease-in-out infinite; }

    </style>

    <link rel="preconnect" href="https://fonts.googleapis.com">

    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Lora:wght@500;600;700&display=swap" rel="stylesheet">

</head>

<body>

    <div id="phone-screen">

        <!-- Loading Overlay -->

        <div id="loading-overlay" class="absolute inset-0 flex items-center justify-center">

            <div class="spinner w-12 h-12 border-4 border-gray-200 rounded-full"></div>

        </div>



        <header id="hud">

            <div class="flex justify-between items-center mb-4">

                <div>

                    <h1 class="text-lg">Everley</h1>

                    <p id="player-level" class="text-xs">Level 1 Applicant</p>

                </div>

                <div class="text-center">

                    <p id="system-time" class="text-xl font-bold"></p>

                    <p id="system-date" class="text-xs"></p>

                </div>

                <div class="text-right relative">

                    <div class="hud-gp-display font-bold text-lg flex items-center gap-1">

                        <i data-lucide="gem" class="inline-block w-4 h-4"></i>

                        <span id="gp-value">0</span>

                    </div>

                    <div id="gp-popup-container"></div>

                </div>

            </div>

            <div class="space-y-2">

                <div class="relative">

                    <div class="w-full progress-bar-bg h-3"><div id="hp-bar" class="progress-bar-fill h-3" style="width: 100%"></div></div>

                    <div class="absolute inset-0 flex justify-between items-center px-2 text-xs font-bold text-white" style="text-shadow: 1px 1px 2px rgba(0,0,0,0.4);">

                        <span>HP</span><span id="hp-value">10/10</span>

                    </div>

                </div>

                <div class="relative">

                    <div class="w-full progress-bar-bg h-3"><div id="exp-bar" class="progress-bar-fill h-3" style="width: 0%"></div></div>

                    <div class="absolute inset-0 flex justify-between items-center px-2 text-xs font-bold text-white" style="text-shadow: 1px 1px 2px rgba(0,0,0,0.4);">

                        <span>EXP</span><span id="exp-value">0/100</span>

                    </div>

                    <div id="exp-popup-container"></div>

                </div>

            </div>

        </header>

        

        <main id="content-area" class="p-4">

            <div id="quests-tab" class="page space-y-4">

                <div class="flex border-b" style="border-color: var(--border-color);">

                    <button onclick="changeQuestView('tasks')" id="tasks-view-btn" class="quest-view-tab active flex-1 text-center font-semibold p-2 border-b-2">Tasks</button>

                    <button onclick="changeQuestView('daily')" id="daily-view-btn" class="quest-view-tab flex-1 text-center font-semibold p-2 border-b-2">Daily</button>

                    <button onclick="changeQuestView('weekly')" id="weekly-view-btn" class="quest-view-tab flex-1 text-center font-semibold p-2 border-b-2">Weekly</button>

                    <button onclick="changeQuestView('monthly')" id="monthly-view-btn" class="quest-view-tab flex-1 text-center font-semibold p-2 border-b-2">Monthly</button>

                     <button onclick="changeQuestView('yearly')" id="yearly-view-btn" class="quest-view-tab flex-1 text-center font-semibold p-2 border-b-2">Yearly</button>

                </div>

                <div id="quest-chain-container"></div>

                 <div id="daily-modifier-container" class="hidden">

                    <div id="daily-modifier" class="p-3 rounded-lg text-center text-sm font-semibold shadow-md"></div>

                </div>

                <div id="tasks-view" class="quest-view space-y-6"></div>

                <div id="daily-view" class="quest-view hidden space-y-3"></div>

                <div id="weekly-view" class="quest-view hidden space-y-3"></div>

                <div id="monthly-view" class="quest-view hidden space-y-3"></div>

                <div id="yearly-view" class="quest-view hidden space-y-3"></div>

            </div>

            <div id="agenda-tab" class="page hidden space-y-4">

                 <div class="cozy-card p-4">

                    <div class="flex items-center justify-between mb-4">

                        <button onclick="changeMonth(-1)" class="p-2 rounded-full hover:bg-gray-200"><i data-lucide="chevron-left"></i></button>

                        <h2 id="calendar-header" class="text-lg font-bold font-heading"></h2>

                        <button onclick="changeMonth(1)" class="p-2 rounded-full hover:bg-gray-200"><i data-lucide="chevron-right"></i></button>

                    </div>

                    <div class="grid grid-cols-7 text-xs font-semibold text-center mb-2" style="color: var(--text-secondary);"><div>Su</div><div>Mo</div><div>Tu</div><div>We</div><div>Th</div><div>Fr</div><div>Sa</div></div>

                    <div id="calendar-grid" class="grid grid-cols-7 gap-1 text-sm"></div>

                </div>

                <div class="cozy-card p-4">

                    <h3 id="agenda-header" class="text-lg font-bold font-heading mb-3">Today's Agenda</h3>

                    <div id="timeline-container" class="relative"></div>

                </div>

            </div>

             <div id="mind-palace-tab" class="page hidden space-y-6">

                <div class="flex justify-between items-center">

                    <h2 class="text-2xl font-bold font-heading">Mind Palace</h2>

                    <button onclick="showMindPalaceEntryModal()" class="cozy-button !py-2 !px-4"><i data-lucide="plus" class="w-5 h-5"></i></button>

                </div>

                <div id="mind-palace-container" class="space-y-4"></div>

            </div>

            <div id="profile-tab" class="page hidden space-y-6">

                 <div id="stats-snapshot-card" class="cozy-card"></div>

                 <div class="cozy-card">

                    <h3 class="text-xl font-bold mb-4 font-heading">Core Skills</h3>

                    <div class="space-y-4">

                        <div><div class="flex justify-between mb-1 text-sm font-medium"><span><i data-lucide="paint-brush" class="inline w-4 h-4 mr-2" style="color:var(--accent-primary);"></i>Artistry</span><div class="flex items-center gap-2"><span id="art-level">Lv. 1</span><button onclick="showSkillTree('art')" class="text-gray-400 hover:text-orange-500"><i data-lucide="award" class="w-4 h-4"></i></button></div></div><div class="skill-bar"><div id="art-bar" class="skill-bar-fill" style="width: 0%"></div></div></div>

                        <div><div class="flex justify-between mb-1 text-sm font-medium"><span><i data-lucide="languages" class="inline w-4 h-4 mr-2" style="color:var(--accent-primary);"></i>Linguistics</span><div class="flex items-center gap-2"><span id="eng-level">Lv. 1</span><button onclick="showSkillTree('eng')" class="text-gray-400 hover:text-orange-500"><i data-lucide="award" class="w-4 h-4"></i></button></div></div><div class="skill-bar"><div id="eng-bar" class="skill-bar-fill" style="width: 0%"></div></div></div>

                        <div><div class="flex justify-between mb-1 text-sm font-medium"><span><i data-lucide="briefcase" class="inline w-4 h-4 mr-2" style="color:var(--accent-primary);"></i>Commerce</span><div class="flex items-center gap-2"><span id="fin-level">Lv. 1</span><button onclick="showSkillTree('fin')" class="text-gray-400 hover:text-orange-500"><i data-lucide="award" class="w-4 h-4"></i></button></div></div><div class="skill-bar"><div id="fin-bar" class="skill-bar-fill" style="width: 0%"></div></div></div>

                        <div><div class="flex justify-between mb-1 text-sm font-medium"><span><i data-lucide="users" class="inline w-4 h-4 mr-2" style="color:var(--accent-primary);"></i>Social</span><div class="flex items-center gap-2"><span id="social-level">Lv. 1</span><button onclick="showSkillTree('social')" class="text-gray-400 hover:text-orange-500"><i data-lucide="award" class="w-4 h-4"></i></button></div></div><div class="skill-bar"><div id="social-bar" class="skill-bar-fill" style="width: 0%"></div></div></div>

                    </div>

                </div>

                <div class="cozy-card"><h3 class="text-xl font-bold font-heading mb-4">Relics</h3><div id="relics-container" class="grid grid-cols-4 gap-4 text-center"></div></div>

                <div class="cozy-card"><h3 class="text-xl font-bold font-heading mb-4">Inventory</h3><div id="inventory-container" class="grid grid-cols-4 gap-4 text-center"></div></div>

                <div class="cozy-card">

                    <h3 class="text-xl font-bold font-heading mb-4">Settings</h3>

                    <div class="space-y-4">

                        <div class="flex justify-between items-center"><span class="font-medium">Theme</span><button onclick="toggleTheme()" class="theme-toggle-btn p-2 rounded-full"><i id="theme-icon" data-lucide="moon"></i></button></div>

                        <div>

                            <span class="font-medium">Aesthetic Engine</span>

                            <div id="theme-selector-container" class="grid grid-cols-3 gap-2 mt-2"></div>

                        </div>

                    </div>

                </div>

                <div class="flex gap-4">

                     <button onclick="toggleRestDay()" id="rest-day-btn" class="flex-grow text-center text-sm p-4 rounded-lg font-semibold transition-colors" style="background-color: var(--bg-secondary); color: var(--text-secondary);">Rest Day</button>

                      <button onclick="toggleGremlinMode()" id="gremlin-mode-btn" class="flex-grow text-center text-sm p-4 rounded-lg font-semibold transition-colors" style="background-color: var(--bg-secondary); color: var(--text-secondary);">Gremlin Mode</button>

                     <button onclick="showGuide()" class="text-center text-sm p-4 rounded-lg font-semibold transition-colors" style="background-color: var(--bg-secondary); color: var(--text-secondary);"><i data-lucide="book-open"></i></button>

                </div>

            </div>

            <div id="goals-tab" class="page hidden space-y-6"></div>

            <div id="treasury-tab" class="page hidden space-y-6">

                <div class="cozy-card"><h3 class="text-lg font-bold font-heading mb-3">🎓 MIT Sloan Fund 🎓</h3><div class="w-full progress-bar-bg rounded-full h-3 mb-1"><div id="mit-fund-bar" class="progress-bar-fill bg-purple-400 h-3 rounded-full" style="width: 1%;"></div></div><div class="flex justify-between text-xs font-semibold mb-3"><span id="mit-fund-current">0</span><span id="mit-fund-goal">2,500,000</span></div><form id="savings-form" class="flex gap-2"><input type="number" id="savings-amount" placeholder="Add to fund" class="styled-input" required><button type="submit" class="cozy-button text-sm !p-2">Save</button></form></div>

                <div class="cozy-card"><h3 class="text-lg font-bold font-heading mb-3">Financial Overview</h3><div class="grid grid-cols-3 gap-2 text-center"><div class="p-2 rounded-lg" style="background-color: #e8f5e9;"><p class="text-xs text-gray-500">Income</p><p id="total-income" class="font-bold text-green-700">0</p></div><div class="p-2 rounded-lg" style="background-color: #ffebee;"><p class="text-xs text-gray-500">Expenses</p><p id="total-expenses" class="font-bold text-red-700">0</p></div><div class="p-2 rounded-lg" style="background-color: #e3f2fd;"><p class="text-xs text-gray-500">Net Balance</p><p id="net-balance" class="font-bold text-blue-700">0</p></div></div></div>

                <div class="cozy-card"><h4 class="text-lg font-bold font-heading mb-3">Transaction Log</h4><div class="flex border-b mb-3" style="border-color:var(--border-color);"><button onclick="setTransactionType('expense')" id="expense-tab-btn" class="transaction-form-tab active flex-1 text-center font-semibold p-2 border-b-2">Expense</button><button onclick="setTransactionType('income')" id="income-tab-btn" class="transaction-form-tab flex-1 text-center font-semibold p-2 border-b-2" style="border-color: transparent; color: var(--text-secondary);">Income</button></div><form id="transaction-form" class="space-y-2 mb-3"><input type="text" id="transaction-desc" placeholder="Description" class="styled-input" required><div class="flex gap-2"><input type="number" id="transaction-amount" placeholder="Amount" class="styled-input" required><select id="transaction-category" class="styled-select"><option>Food</option><option>Transport</option><option>Art</option><option>Edu</option><option>Fun</option><option>Other</option></select></div><button type="submit" id="transaction-submit-btn" class="cozy-button w-full text-sm !py-2">Add Expense</button></form><div id="transaction-list" class="max-h-40 overflow-y-auto pr-2"></div></div>

                <div class="cozy-card"><h4 class="text-lg font-bold font-heading mb-2">Spending Breakdown</h4><div class="w-full h-48"><canvas id="expense-chart"></canvas></div></div>

            </div>

            <div id="rewards-tab" class="page hidden space-y-6">

                <div class="cozy-card"><h3 class="text-lg font-bold font-heading mb-1">Dopamine Rewards</h3><p class="text-xs mb-4" style="color: var(--text-secondary);">Cash in your GP for things that make you happy!</p><div id="rewards-list" class="grid grid-cols-2 gap-3"></div></div>

                <div id="gachapon-container" class="grid grid-cols-1 md:grid-cols-2 gap-4"></div>

            </div>

        </main>

        

        <nav id="bottom-nav" class="w-full flex justify-around">

            <button onclick="changeTab('quests')" class="nav-button active flex-1 p-3 flex flex-col items-center justify-center text-xs gap-1"><i data-lucide="scroll-text"></i><span>Quests</span></button>

            <button onclick="changeTab('goals')" class="nav-button flex-1 p-3 flex flex-col items-center justify-center text-xs gap-1"><i data-lucide="award"></i><span>Goals</span></button>

            <button onclick="changeTab('mind-palace')" class="nav-button flex-1 p-3 flex flex-col items-center justify-center text-xs gap-1"><i data-lucide="brain-cog"></i><span>Mind Palace</span></button>

            <button onclick="changeTab('profile')" class="nav-button flex-1 p-3 flex flex-col items-center justify-center text-xs gap-1"><i data-lucide="user-circle"></i><span>Profile</span></button>

            <button onclick="changeTab('agenda')" class="nav-button flex-1 p-3 flex flex-col items-center justify-center text-xs gap-1"><i data-lucide="calendar-days"></i><span>Agenda</span></button>

            <button onclick="changeTab('treasury')" class="nav-button flex-1 p-3 flex flex-col items-center justify-center text-xs gap-1"><i data-lucide="landmark"></i><span>Finances</span></button>

            <button onclick="changeTab('rewards')" class="nav-button flex-1 p-3 flex flex-col items-center justify-center text-xs gap-1"><i data-lucide="gift"></i><span>Rewards</span></button>

        </nav>



        <button id="fab-btn" class="fab">

            <i data-lucide="brain-circuit"></i>

        </button>

    </div>

    

    <div id="notification-modal" class="fixed inset-0 z-50 p-4 flex items-center justify-center">

        <div id="modal-backdrop-blur" class="modal-backdrop" onclick="closeModal()"></div>

        <div id="modal-content" class="cozy-card text-center max-w-sm w-full relative"></div>

    </div>



<script type="module">

// --- Firebase SDK Imports ---

import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";

import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";

import { getFirestore, doc, onSnapshot, setDoc, getDoc, writeBatch, serverTimestamp, Timestamp, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";



// --- DATE HELPER & DEEP CLONE ---

const dateToISO = (date) => new Intl.DateTimeFormat('en-CA', { year: 'numeric', month: '2-digit', day: '2-digit', timeZone: 'Asia/Taipei' }).format(date);

const deepClone = (obj) => JSON.parse(JSON.stringify(obj));

const getStartOfWeek = (date) => { const d = new Date(date); const day = d.getDay(); const diff = d.getDate() - day + (day === 0 ? -6 : 1); d.setHours(0,0,0,0); return d; };



// --- INITIAL GAME STATE (for new users) ---

const initialGameState = {

    playerName: 'Everley', level: 1, exp: 0, expToNextLevel: 100, hp: 10, maxHp: 10, gp: 0, 

    theme: 'light',

    unlockedThemes: ['light', 'dark', 'inkopolis', 'stardew', 'baldurs-gate'],

    activeEffects: { flowStateUntil: null },

    temporaryQuests: [],

    lastDailyTasks: [],

    activeModifier: null,

    isGremlinMode: false,

    skills: { art: { level: 1, exp: 0, expToNext: 50 }, eng: { level: 1, exp: 0, expToNext: 50 }, fin: { level: 1, exp: 0, expToNext: 50 }, social: { level: 1, exp: 0, expToNext: 50 } },

    schedule: [ {id: `evt_1`, title: 'Team Meeting', date: dateToISO(new Date()), time: '10:00', completed: false, category: 'Work'}, {id: `evt_2`, title: 'GMAT Prep', date: dateToISO(new Date()), time: '18:30', completed: false, category: 'Study'} ],

    lastLogin: null, isRestDay: false, createdAt: serverTimestamp(),

    finances: { transactions: [], mitSloanFund: 0, mitSloanGoal: 2500000, lastSalaryCheck: new Date(new Date().setDate(new Date().getDate() - 1)).toISOString().split('T')[0] },

    inventory: [],

    relics: { equipped: [] },

    mindPalaceEntries: [],

    questChains: {

        'mit_app': {

            currentStep: 0,

        }

    },

    rewards: [

        // Quick Dopamine Hits

        { name: 'Main Character Soundtrack', cost: 100, icon: 'music', type: 'hp_heal', value: 1, description: 'One hour, one earbud in, looping the same 3 songs.' },

        { name: 'YouTube Rabbit Hole', cost: 150, icon: 'youtube', type: 'hp_heal', value: 2, description: 'Permission to get lost in video essays.' },

        { name: 'Popsicle Moment', cost: 200, icon: 'ice-cream', type: 'item', value: 0, description: 'A simple, sweet treat for a hot day.' },

        { name: 'Gremlin Hour', cost: 200, icon: 'twitter', type: 'hp_heal', value: 2, description: 'Guilt-free 3am Insta/Twitter scrolling.' },

        { name: 'Favorite Snack Voucher', cost: 250, icon: 'cookie', type: 'item', value: 0, description: 'Token for real-life snacks.' },

        

        // Food & Drink Tier

        { name: 'Cozy Biscuit & Tea Time', cost: 280, icon: 'coffee', type: 'item', value: 0, description: 'A classic combination for a relaxing break.' },

        { name: 'Artisan Chocolate Bar', cost: 280, icon: 'cookie', type: 'item', value: 0, description: 'A voucher for a fancy chocolate bar.' },

        { name: 'Premium Green Tea', cost: 300, icon: 'leaf', type: 'item', value: 0, description: 'A voucher for a high-quality tea session.' },

        { name: 'Boba Tea Break', cost: 320, icon: 'glass-water', type: 'item', value: 0, description: 'A voucher for your favorite boba tea.' },

        { name: 'Choco Chip Frappe', cost: 350, icon: 'coffee', type: 'item', value: 0, description: 'For when you feel ✨extra✨.' },

        { name: 'Vanilla Cream Puff Mandate', cost: 400, icon: 'cake', type: 'item', value: 0, description: 'Redeem this token for a real-life cream puff.' },

        { name: 'Ramen Bowl Fund', cost: 450, icon: 'utensils-crossed', type: 'item', value: 0, description: 'Contribute to your next comforting bowl of ramen.' },

        { name: 'Sashimi Fund Contribution', cost: 500, icon: 'fish', type: 'item', value: 0, description: 'Put GP towards your next sashimi platter.' },

        { name: 'Crème Brûlée Mandate', cost: 550, icon: 'flame-kindling', type: 'item', value: 0, description: 'A token for a perfectly caramelized dessert.' },



        // Gaming Tier

        { name: 'Character Creator Deep Dive', cost: 450, icon: 'user-cog', type: 'hp_heal', value: 4, description: 'Spend an hour perfecting a new character. No need to actually play, just create.' },

        { name: 'Cozy Game Sesh', cost: 500, icon: 'cat', type: 'hp_heal', value: 4, description: 'Stardew or Animal Crossing time.' },

        { name: 'Splatoon 3 Turf War', cost: 600, icon: 'gamepad-2', type: 'hp_heal', value: 5, description: 'Time to main that Inkbrush.' },

        { name: 'Sims Build Mode', cost: 750, icon: 'home', type: 'hp_heal', value: 6, description: 'Unleash your inner build goblin.' },

        { name: 'Baldur\'s Gate 3 Chaos', cost: 1000, icon: 'swords', type: 'hp_heal', value: 8, description: 'For Bard main or Rogue alt shenanigans.' },

        { name: 'Shiny Hunt Voucher', cost: 1200, icon: 'sparkles', type: 'hp_heal', value: 7, description: 'Dedicated time for Pokémon shiny hunting.'},



        // Hobby & Recharge Tier

        { name: 'Digital Art Sesh', cost: 400, icon: 'pen-tool', type: 'hp_heal', value: 4, description: 'Dedicated time for your WIPs, no distractions.' },

        { name: 'Netflix Brain Melt', cost: 500, icon: 'tv', type: 'hp_heal', value: 4, description: 'For when your brain goes brrrr.' },

        { name: 'Bookstore Wander', cost: 700, icon: 'book-open', type: 'hp_heal', value: 5, description: 'Permission to spend an hour getting lost in a bookstore.' },

        { name: 'New Candle Fund', cost: 800, icon: 'flame', type: 'item', value: 0, description: 'Contribute to your candle collection.'},

        { name: 'Stationery Spree Fund', cost: 900, icon: 'pencil-ruler', type: 'item', value: 0, description: 'Contribute GP towards new pens, notebooks, or art supplies.' },

        

        // Epic Meal Tier

        { name: 'Fried Chicken Feast', cost: 1800, icon: 'drumstick', type: 'hp_heal', value: 10, description: 'Indulge in a crispy, juicy fried chicken meal.' },

        { name: 'Sushi Platter Voucher', cost: 2500, icon: 'fish-symbol', type: 'item', value: 0, description: 'Redeem for a delicious platter of sushi or sashimi.' },

        { name: 'All-You-Can-Eat Buffet', cost: 4000, icon: 'party-popper', type: 'hp_heal', value: 15, description: 'A ticket to a grand buffet experience.' },

        

        // High-Tier Rewards

        { name: 'Social Disappearance Pass', cost: 1500, icon: 'shield-off', type: 'hp_heal', value: 10, description: 'A voucher for when you need to recharge. No explanation needed.' },

        { name: 'Splatfest Power-Up', cost: 3000, icon: 'spline', type: 'hp_heal', value: 12, description: 'A full afternoon dedicated to grinding for an upcoming Splatfest.' },

        { name: 'Fox Nap', cost: 5000, icon: 'moon', type: 'hp_heal', value: 999, description: 'Fox-curl under 5 blankets. Full wellness restore.' },

        { name: 'New Game Fund', cost: 10000, icon: 'shopping-cart', type: 'item', value: 0, description: 'Major contribution to your next game purchase.'},

        { name: 'Concert Ticket Fund', cost: 12000, icon: 'music-4', type: 'item', value: 0, description: 'A major contribution to seeing a favorite artist live.' },

        { name: 'Vacation Fund', cost: 20000, icon: 'plane', type: 'item', value: 0, description: 'A significant contribution to your next getaway.' },

    ],

    completedDailyTasks: [], dailyLogs: {}, streaks: {}, stats: { totalTasksCompleted: 0 },

    recurringQuestsState: {}, lastQuestReset: { daily: null, weekly: null, monthly: null, yearly: null },

    timerSettings: { customTimes: { focus: 25, shortBreak: 5, longBreak: 15 }, ambientSound: 'none', hardModeEnabled: false, hardModeStake: 50, audioVolume: -10 },

    focusLog: [],

    questCounters: { physicalTraining: 0, articlesRead: 0, expenseTrackedDays: [], perfectDays: [], booksRead: 0, sloanDeposits: 0, gmatProjects: 0, artProjects: 0 },

    gachapons: {

        toolkit: {

            name: "Gremlin's Toolkit",

            cost: 200,

            lootTable: [

                { id: 'g_gp1', name: 'Pouch of Coins', icon: 'coins', type: 'gp', value: 100, rarity: 'common'},

                { id: 'g_exp1', name: 'Tome of Knowledge', icon: 'book', type: 'exp', value: 50, rarity: 'common' },

                { id: 'g_hp1', name: 'Bottle of Green Tea', icon: 'beer', type: 'consumable', value: { type: 'hp', amount: 5 }, rarity: 'common' },

                { id: 'g_gp2', name: 'Satchel of Coins', icon: 'coins', type: 'gp', value: 250, rarity: 'uncommon' },

                { id: 'g_exp2', name: 'Leah\'s Sculpture', icon: 'gem', type: 'exp', value: 125, rarity: 'uncommon' },

                { id: 'g_hp2', name: 'Choco Chip Frappe', icon: 'coffee', type: 'consumable', value: { type: 'hp', amount: 10 }, rarity: 'uncommon' },

                { id: 'g_skill1', name: 'Inkbrush Polish Kit', icon: 'paintbrush-2', type: 'consumable', value: { type: 'skill_exp', skill: 'art', amount: 20 }, rarity: 'uncommon' },

                { id: 'g_skill2', name: 'Vial of Insight', icon: 'flask-conical', type: 'consumable', value: { type: 'skill_exp', skill: 'eng', amount: 20 }, rarity: 'uncommon' },

                { id: 'g_skill3', name: 'Astarion\'s Approval', icon: 'dagger', type: 'consumable', value: { type: 'skill_exp', skill: 'fin', amount: 20 }, rarity: 'uncommon' },

                { id: 'g_skip1', name: 'Scroll of Haste', icon: 'scroll-text', type: 'consumable', value: { type: 'skip_task' }, rarity: 'rare' }

            ]

        },

        relics: {

            name: "Fox Shrine Relics",

            cost: 1000,

            lootTable: [

                { id: 'r_tea1', name: 'Tea Leaf of Serenity', icon: 'leaf', type: 'relic', value: { type: 'focus_bonus', amount: 0.05 }, rarity: 'uncommon', description: "+5% rewards from Focus Chamber." },

                { id: 'r_headphone1', name: 'Wired Earbuds', icon: 'headphones', type: 'relic', value: { type: 'hp_music_bonus', amount: 1 }, rarity: 'uncommon', description: "Music rewards restore +1 extra HP." },

                { id: 'r_game1', name: 'Joy-Con of Vigor', icon: 'gamepad-2', type: 'relic', value: { type: 'hp_gaming_bonus', amount: 1 }, rarity: 'rare', description: "Gaming rewards restore +1 extra HP." },

                { id: 'r_art1', name: 'Ever-inking Pen', icon: 'pen-tool', type: 'relic', value: { type: 'art_hp_chance', chance: 0.20 }, rarity: 'rare', description: "20% chance that art rewards also restore 2 HP." },

                { id: 'r_hp1', name: 'Amulet of Vitality', icon: 'heart-pulse', type: 'relic', value: { type: 'hp_regen', amount: 1 }, rarity: 'rare', description: "Regain 1 extra HP on daily reset." },

                { id: 'r_dagger1', name: "Astarion's Dagger", icon: 'dagger', type: 'relic', isActive: true, cooldown: 86400, value: { type: 'active_double_gp' }, rarity: 'epic', description: "(Once per day) Sacrifice 2 HP to gain double GP from the next completed quest." },

                { id: 'r_scroll1', name: "Scroll of Focus", icon: 'scroll', type: 'relic', isActive: true, cooldown: 14400, value: { type: 'active_complete_focus' }, rarity: 'epic', description: "(Once every 4 hours) Instantly complete the current Focus Chamber session and receive full rewards." },

                { id: 'r_hoodie1', name: 'Hoodie of Solitude', icon: 'user-x', type: 'relic', value: { type: 'rest_day_bonus', amount: 20 }, rarity: 'epic', description: "Gain +20 extra GP when activating Rest Day." },

                { id: 'r_sloan1', name: 'Sloan\'s Monocle', icon: 'graduation-cap', type: 'relic', value: { type: 'study_exp_bonus', amount: 0.05 }, rarity: 'epic', description: "+5% EXP from all study projects." },

                { id: 'r_fox1', name: 'Trickster Fox Charm', icon: 'cat', type: 'relic', value: { type: 'gacha_cost_redux', amount: 0.05 }, rarity: 'epic', description: "A faint aura of chaos. 5% chance for a Gachapon pull to be free." }

            ]

        },

        culinary: {

            name: "Culinary Crate",

            cost: 500,

            lootTable: [

                { id: 'm_cookie', name: 'Gourmet Cookie', icon: 'cookie', type: 'consumable', value: { type: 'hp', amount: 5 }, rarity: 'common', description: "A delicious, freshly-baked cookie." },

                { id: 'm_icecream', name: 'Artisanal Ice Cream', icon: 'ice-cream-2', type: 'consumable', value: { type: 'hp', amount: 8 }, rarity: 'common', description: "A scoop of rich, creamy ice cream." },

                { id: 'm_ramen', name: 'Instant Ramen Upgrade', icon: 'utensils-crossed', type: 'consumable', value: { type: 'hp', amount: 10 }, rarity: 'uncommon', description: "All the fixings for a top-tier instant ramen bowl." },

                { id: 'm_friedchicken', name: 'Fried Chicken Piece', icon: 'drumstick', type: 'consumable', value: { type: 'hp', amount: 12 }, rarity: 'uncommon', description: "One perfect piece of fried chicken." },

                { id: 'm_sashimi', name: 'Sashimi Plate', icon: 'fish-symbol', type: 'consumable', value: { type: 'hp', amount: 15 }, rarity: 'rare', description: "A small, fresh plate of assorted sashimi." },

                { id: 'm_cremebrulee', name: 'Crème Brûlée', icon: 'flame-kindling', type: 'consumable', value: { type: 'hp', amount: 18 }, rarity: 'rare', description: "A decadent, perfectly torched crème brûlée." },

                { id: 'm_buffet', name: 'Buffet Pass', icon: 'party-popper', type: 'consumable', value: { type: 'hp', amount: 30 }, rarity: 'epic', description: "A voucher for an all-you-can-eat feast." }

            ]

        }

    },

    masteryTracks: {

        english: { title: 'English Linguistics', icon: 'languages', level: 1, exp: 0, expToNext: 200, milestones: { 'toefl': { title: 'TOEFL Score', target: 110, current: 0, unit: 'points'}, 'ielts': { title: 'IELTS Band', target: 8.0, current: 0, unit: 'band'}, 'toeic': { title: 'TOEIC Score', target: 950, current: 0, unit: 'points'}, 'gept': { title: 'GEPT High-Intermediate', target: 1, current: 0, unit: 'Pass'}, 'vocab': { title: 'Vocabulary Size', target: 10000, current: 1500, unit: 'words'} }, projects: [ { id: 'proj_eng_vocab', title: 'Vocabulary Sprint', description: 'Learn 20 new words.', rewards: { trackExp: 50, playerExp: 20, gp: 30 } }, { id: 'proj_eng_novel', title: 'Read a Novel Chapter', description: 'Analyze themes and characters.', rewards: { trackExp: 40, playerExp: 30, gp: 20 } }, { id: 'proj_eng_article', title: 'Article Summary', description: 'Read and summarize an academic article.', rewards: { trackExp: 60, playerExp: 35, gp: 40 } }, { id: 'proj_eng_podcast', title: 'Podcast Transcription', description: 'Listen to and transcribe a 15-min podcast.', rewards: { trackExp: 50, playerExp: 25, gp: 30 } } ] },

        finance: { title: 'Financial Acumen', icon: 'trending-up', level: 1, exp: 0, expToNext: 250, milestones: { 'networth': { title: 'Net Worth', target: 1000000, current: 0, unit: 'NTD'}, 'sloanfund': { title: 'MIT Sloan Fund', target: 2500000, current: 0, unit: 'NTD'} }, projects: [ { id: 'proj_fin_market', title: 'Market Analysis', description: 'Read and summarize today\'s market news.', rewards: { trackExp: 40, playerExp: 20, gp: 25 } }, { id: 'proj_fin_econ', title: 'Economic Theory Study', description: 'Study a chapter of an economics textbook.', rewards: { trackExp: 60, playerExp: 30, gp: 30 } }, { id: 'proj_fin_case', title: 'Business Case Study', description: 'Analyze a Harvard Business Review case.', rewards: { trackExp: 80, playerExp: 50, gp: 50 } } ] },

        tests: { title: 'Standardized Tests', icon: 'award', level: 1, exp: 0, expToNext: 300, milestones: { 'gmat': { title: 'GMAT Score', target: 720, current: 0, unit: 'points'} }, projects: [ { id: 'proj_test_gmat_quant', title: 'GMAT Quant Section', description: 'Complete and review a 31-question section.', rewards: { trackExp: 100, playerExp: 50, gp: 60 } }, { id: 'proj_test_gmat_verbal', title: 'GMAT Verbal Section', description: 'Complete and review a 36-question section.', rewards: { trackExp: 100, playerExp: 50, gp: 60 } }, { id: 'proj_test_mock', title: 'Full Mock Exam', description: 'Endure a full-length mock test.', rewards: { trackExp: 250, playerExp: 150, gp: 200 } } ] },

        art: { title: 'Artistic Development', icon: 'paint-brush', level: 1, exp: 0, expToNext: 150, milestones: { 'portfolio': { title: 'Portfolio Pieces', target: 10, current: 0, unit: 'pieces'} }, projects: [ { id: 'proj_art_sketch', title: 'Daily Sketch', description: 'A 30-minute observational sketch.', rewards: { trackExp: 30, playerExp: 15, gp: 20 } }, { id: 'proj_art_study', title: 'Master Study', description: 'Recreate a piece from a master artist.', rewards: { trackExp: 70, playerExp: 40, gp: 50 } }, { id: 'proj_art_personal', title: 'Personal Project Hour', description: 'Work on a long-term art piece.', rewards: { trackExp: 50, playerExp: 30, gp: 30 } } ] },

        social: { title: "The Bard's College", icon: 'users', level: 1, exp: 0, expToNext: 100, milestones: { 'linkedin': { title: 'LinkedIn Connections', target: 500, current: 150, unit: 'conn.'} }, projects: [ { id: 'proj_soc_email', title: 'Draft Networking Email', description: 'Draft a networking email to a Sloan alumnus.', rewards: { trackExp: 40, playerExp: 10, gp: 30 } }, { id: 'proj_soc_intro', title: 'Practice Self-Intro', description: 'Practice a 60-second self-introduction.', rewards: { trackExp: 25, playerExp: 10, gp: 15 } } ] }

    }

};



// --- GLOBAL VARIABLES & STATE ---

let gameState = { ...initialGameState };

let calendarDate = new Date();

let selectedDate = dateToISO(new Date());

let currentTransactionType = 'expense';

let db, auth, userId, unsubscribe, appId;

let isInitialLoad = true;

let timerInterval = null;

let timerState = { running: false, mode: 'focus', timeLeft: 25 * 60, totalTime: 25 * 60, linkedProjectId: null, linkedQuestId: null, consecutiveCycles: 0, autoCycleTimer: false, isHardMode: false, stakedAmount: 0, focusSessionsCompleted: 0 };

let fabDraggable = { isDragging: false, hasMoved: false, startX: 0, startY: 0, initialLeft: 0, initialTop: 0 };





// --- AMBIENT SOUNDS ---

let ambientSounds = {};

function setupAmbientSounds() {

    const volume = gameState.timerSettings.audioVolume || -10;

    ambientSounds.rain = new Tone.Noise("pink").toDestination();

    ambientSounds.rain.volume.value = volume - 10;

    const rainFilter = new Tone.AutoFilter("4n").toDestination().start();

    ambientSounds.rain.connect(rainFilter);



    ambientSounds.cafe = new Tone.Noise("brown").toDestination();

    ambientSounds.cafe.volume.value = volume - 18;

    const cafeFilter = new Tone.AutoFilter("2n").toDestination().start();

    cafeFilter.frequency.value = 400;

    cafeFilter.depth.value = 0.3;

    ambientSounds.cafe.connect(cafeFilter);



    ambientSounds.library = new Tone.Noise("white").toDestination();

    ambientSounds.library.volume.value = volume - 25;

    const libFilter = new Tone.AutoFilter("8n").toDestination().start();

    ambientSounds.library.connect(libFilter);



    ambientSounds.synth = new Tone.FMSynth({

        harmonicity: 3,

        modulationIndex: 10,

        detune: 0,

        oscillator: { type: "sine" },

        envelope: { attack: 0.01, decay: 0.01, sustain: 1, release: 0.5 },

        modulation: { type: "square" },

        modulationEnvelope: { attack: 0.5, decay: 0, sustain: 1, release: 0.5 }

    }).toDestination();

    ambientSounds.synth.volume.value = volume - 15;

    const lfo = new Tone.LFO("8m", 200, 1000).start();

    lfo.connect(ambientSounds.synth.frequency);

}

function playAmbientSound(sound) {

    stopAmbientSound();

    if (sound !== 'none' && ambientSounds[sound]) {

        if (sound === 'synth') {

            ambientSounds.synth.triggerAttack("C2");

        } else {

            ambientSounds[sound].start();

        }

        timerState.ambientSound = sound;

    }

}

function stopAmbientSound() {

    Object.values(ambientSounds).forEach(s => {

        if(s.state === 'started') s.stop();

        if(s.triggerRelease) s.triggerRelease();

    });

    timerState.ambientSound = 'none';

}

function setAudioVolume(volume) {

    gameState.timerSettings.audioVolume = volume;

    Object.values(ambientSounds).forEach(s => s.volume.value = volume);

    // Adjust relative volumes

    if(ambientSounds.rain) ambientSounds.rain.volume.value = volume - 10;

    if(ambientSounds.cafe) ambientSounds.cafe.volume.value = volume - 18;

    if(ambientSounds.library) ambientSounds.library.volume.value = volume - 25;

    if(ambientSounds.synth) ambientSounds.synth.volume.value = volume - 15;

}





// --- DOM ELEMENT CACHE ---

const dom = {

    loadingOverlay: document.getElementById('loading-overlay'),

    level: document.getElementById('player-level'), expBar: document.getElementById('exp-bar'), expValue: document.getElementById('exp-value'), hpBar: document.getElementById('hp-bar'), hpValue: document.getElementById('hp-value'), gpValue: document.getElementById('gp-value'), 

    artBar: document.getElementById('art-bar'), artLevel: document.getElementById('art-level'), 

    engBar: document.getElementById('eng-bar'), engLevel: document.getElementById('eng-level'), 

    finBar: document.getElementById('fin-bar'), finLevel: document.getElementById('fin-level'),

    socialBar: document.getElementById('social-bar'), socialLevel: document.getElementById('social-level'), 

    dailyTasksContainer: document.getElementById('tasks-view'), modal: document.getElementById('notification-modal'), modalContent: document.getElementById('modal-content'), 

    restDayBtn: document.getElementById('rest-day-btn'), gremlinModeBtn: document.getElementById('gremlin-mode-btn'),

    savingsForm: document.getElementById('savings-form'), mitFundBar: document.getElementById('mit-fund-bar'), mitFundCurrent: document.getElementById('mit-fund-current'), mitFundGoal: document.getElementById('mit-fund-goal'), totalIncome: document.getElementById('total-income'), totalExpenses: document.getElementById('total-expenses'), netBalance: document.getElementById('net-balance'), transactionForm: document.getElementById('transaction-form'), transactionCategory: document.getElementById('transaction-category'), transactionSubmitBtn: document.getElementById('transaction-submit-btn'), transactionList: document.getElementById('transaction-list'), incomeTabBtn: document.getElementById('income-tab-btn'), expenseTabBtn: document.getElementById('expense-tab-btn'),

    goalsTab: document.getElementById('goals-tab'), inventoryContainer: document.getElementById('inventory-container'),

    rewardsList: document.getElementById('rewards-list'),

    calendarHeader: document.getElementById('calendar-header'), calendarGrid: document.getElementById('calendar-grid'), agendaHeader: document.getElementById('agenda-header'), timelineContainer: document.getElementById('timeline-container'),

    gpPopupContainer: document.getElementById('gp-popup-container'), expPopupContainer: document.getElementById('exp-popup-container'),

    systemTime: document.getElementById('system-time'), systemDate: document.getElementById('system-date'),

    dailyView: document.getElementById('daily-view'), weeklyView: document.getElementById('weekly-view'), monthlyView: document.getElementById('monthly-view'), yearlyView: document.getElementById('yearly-view'),

    statsSnapshotCard: document.getElementById('stats-snapshot-card'),

    gachaponContainer: document.getElementById('gachapon-container'),

    relicsContainer: document.getElementById('relics-container'),

    themeSelectorContainer: document.getElementById('theme-selector-container'),

    dailyModifierContainer: document.getElementById('daily-modifier-container'),

    dailyModifier: document.getElementById('daily-modifier'),

    mindPalaceContainer: document.getElementById('mind-palace-container'),

    fabBtn: document.getElementById('fab-btn'),

    questChainContainer: document.getElementById('quest-chain-container'),

};



// --- GAME DATA CONSTANTS ---

const dailyTasks = [ { id: 'f_01', title: 'Wake before 7:00 AM', rewards: { exp: 15, gp: 15 }, category: 'foundations', streakable: true, priority: 'medium' }, { id: 'f_02', title: 'Hydrate upon waking (500ml)', rewards: { exp: 10, gp: 10, hp: 1 }, category: 'foundations', streakable: true, priority: 'low' }, { id: 'f_03', title: 'Morning hygiene routine', rewards: { exp: 10, gp: 10, hp: 1 }, category: 'foundations', streakable: true, priority: 'low' }, { id: 'f_04', title: 'Tidy personal space (15 mins)', rewards: { exp: 20, gp: 20 }, category: 'foundations', priority: 'low' }, { id: 'w_01', title: 'Physical Training (1 hour)', rewards: { exp: 50, gp: 60, hp: 2 }, category: 'wellness', priority: 'medium' }, { id: 'w_02', title: 'Maintain optimal diet', rewards: { exp: 40, gp: 50, hp: 2 }, category: 'wellness', priority: 'high', hpCostOnFail: 1 }, { id: 'w_03', title: 'Mindful breathing or Meditation (5 mins)', rewards: { exp: 15, gp: 20, hp: 2 }, category: 'wellness', priority: 'medium' }, { id: 'w_04', title: 'Morning sunlight exposure (10 mins)', rewards: { exp: 15, gp: 15, hp: 1 }, category: 'wellness', priority: 'low' }, { id: 'w_05', title: 'Evening digital detox (1hr before bed)', rewards: { exp: 25, gp: 30, hp: 1 }, category: 'wellness', priority: 'medium' }, { id: 'w_06', title: 'Creative Practice (15+ mins)', rewards: { exp: 20, gp: 20 }, category: 'wellness', priority: 'low' }, { id: 'er_01', title: 'Read one article (Economist, HBR, etc.)', rewards: { exp: 30, gp: 30 }, category: 'english_reading', priority: 'medium' }, { id: 'er_02', title: 'Deep Reading of a book (20+ pages)', rewards: { exp: 30, gp: 30 }, category: 'english_reading', priority: 'low' }, { id: 'er_03', title: 'Learn new GMAT vocabulary words', rewards: { exp: 25, gp: 25 }, category: 'english_reading', priority: 'medium' }, { id: 'el_01', title: 'Listen to a 30-min business/tech podcast', rewards: { exp: 30, gp: 30 }, category: 'english_listening', priority: 'medium' }, { id: 'el_02', title: 'Watch a 15-min TED Talk (no subtitles)', rewards: { exp: 25, gp: 25 }, category: 'english_listening', priority: 'low' }, { id: 'esw_01', title: 'Practice pronunciation (15 mins)', rewards: { exp: 25, gp: 25 }, category: 'english_speaking', priority: 'low' }, { id: 'esw_02', title: 'Write a 250-word article summary', rewards: { exp: 40, gp: 40 }, category: 'english_speaking', priority: 'medium' }, { id: 'esw_03', title: 'Journal entry in English (150+ words)', rewards: { exp: 20, gp: 20 }, category: 'english_speaking', priority: 'low' }, { id: 'fq_01', title: 'Solve 5 GMAT quantitative problems', rewards: { exp: 40, gp: 50 }, category: 'finance_quant', priority: 'high', hpCostOnFail: 1 }, { id: 'fq_02', title: 'Read daily market summary (WSJ, Bloomberg)', rewards: { exp: 25, gp: 30 }, category: 'finance_quant', priority: 'medium' }, { id: 'fq_03', title: 'Analyze one company\'s financial statement', rewards: { exp: 50, gp: 60 }, category: 'finance_quant', priority: 'low' }, { id: 'mit_01', title: 'Application Focus Block (1 hour)', rewards: { exp: 60, gp: 70 }, category: 'mit_application', priority: 'high', hpCostOnFail: 2 }, { id: 'mit_02', title: 'Research a Sloan professor, lab, or club', rewards: { exp: 25, gp: 30 }, category: 'mit_application', priority: 'medium' }, { id: 'mit_03', title: 'Draft/edit a section of an application essay', rewards: { exp: 50, gp: 50 }, category: 'mit_application', priority: 'high' }, { id: 'mit_04', title: 'Network: Connect with one person on LinkedIn', rewards: { exp: 30, gp: 40 }, category: 'mit_application', priority: 'medium' }, { id: 'c_01', title: 'Complete workday', rewards: { exp: 40, gp: 60 }, category: 'career', priority: 'high' }, { id: 'c_02', title: 'Attend night school session', rewards: { exp: 40, gp: 60 }, category: 'career', priority: 'high' }, ];

const gremlinTasks = [ { id: 'g_01', title: 'Hydrate (one glass of water)', rewards: { exp: 5, gp: 5, hp: 1 }, category: 'gremlin' }, { id: 'g_02', title: 'Stretch for 5 minutes', rewards: { exp: 10, gp: 5 }, category: 'gremlin' }, { id: 'g_03', title: 'Listen to one favorite song', rewards: { exp: 5, gp: 10 }, category: 'gremlin' }, { id: 'g_04', title: 'Tidy one small thing', rewards: { exp: 10, gp: 10 }, category: 'gremlin' } ];

const skillTrees = { 

    art: [ { level: 3, id: 'art_p1', name: "Creative Vigor", description: "+1 HP recovery from 'Creative Practice' quest.", effect: { type: 'quest_hp_bonus', questId: 'w_06', value: 1 } }, { level: 5, id: 'art_p2', name: "Aesthetic Eye", description: "Gain 10% more GP from all sources.", effect: { type: 'passive_gp_bonus', value: 1.10 } }, { level: 8, id: 'art_p3', name: "Inspired Work", description: "Creative quests have a chance to grant double rewards.", effect: { type: 'quest_double_chance', questId: 'w_06', chance: 0.15 } } ], 

    eng: [ { level: 3, id: 'eng_p1', name: "Efficient Reading", description: "+10% EXP from all Reading quests.", effect: { type: 'category_exp_bonus', category: 'english_reading', value: 1.10 } }, { level: 5, id: 'eng_p2', name: "Eloquent Summary", description: "Writing quests grant an additional +10 Skill EXP.", effect: { type: 'category_skill_exp_bonus', category: 'english_speaking', value: 10 } }, { level: 8, id: 'eng_p3', name: "Linguistic Precision", description: "All Linguistics skill gains are increased by 5%.", effect: { type: 'skill_gain_bonus', skill: 'eng', value: 1.05 } } ], 

    fin: [ { level: 3, id: 'fin_p1', name: "Quantitative Acumen", description: "+10% GP from Finance & Quant quests.", effect: { type: 'category_gp_bonus', category: 'finance_quant', value: 1.10 } }, { level: 5, id: 'fin_p2', name: "Market Insight", description: "Sloan Fund deposits have a 5% chance to grant a 100 GP bonus.", effect: { type: 'action_bonus_chance', action: 'deposit', chance: 0.05, bonus: { gp: 100 } } }, { level: 8, id: 'fin_p3', name: "Compound Interest", description: "Automatically gain 1 GP per day for every 10,000 in your Sloan Fund.", effect: { type: 'passive_interest', source: 'mitSloanFund', rate: 0.0001 } } ],

    social: [ { level: 3, id: 'soc_p1', name: "Charisma", description: "+10% GP from networking quests.", effect: { type: 'quest_gp_bonus', questId: 'mit_04', value: 1.10 } }, { level: 5, id: 'soc_p2', name: "Rapport", description: "Social projects have a 10% chance to grant double EXP.", effect: { type: 'track_double_chance', track: 'social', chance: 0.10 } } ]

};

const eventCategories = { Study: { color: 'blue', bg: 'bg-blue-100', border: 'border-blue-400' }, Work: { color: 'gray', bg: 'bg-gray-100', border: 'border-gray-400' }, Wellness: { color: 'green', bg: 'bg-green-100', border: 'border-green-400' }, Personal: { color: 'orange', bg: 'bg-orange-100', border: 'border-orange-400' }, };

const synth = new Tone.PolySynth(Tone.Synth).toDestination();

const playSound = (note, duration = "8n") => {

    if (typeof Tone !== 'undefined') {

        if (Tone.context.state !== 'running') {

            Tone.start();

        }

        synth.triggerAttackRelease(note, duration, Tone.now());

    }

};

const recurringQuests = { 

    daily: [ 

        { id: 'd_01', title: 'Daily Dedication', description: 'Complete 5 Daily Tasks.', target: 5, rewards: { exp: 50, gp: 50 }, icon: 'check-circle-2', tracker: () => gameState.completedDailyTasks.length },

        { id: 'd_02', title: 'Wellness Watch', description: 'Complete 1 Wellness task.', target: 1, rewards: { exp: 20, gp: 20, hp: 1 }, icon: 'heart-pulse', tracker: () => gameState.completedDailyTasks.filter(id => (dailyTasks.find(t=>t.id===id) || {}).category === 'wellness').length },

        { id: 'd_03', title: 'Linguistic Leap', description: 'Complete 1 English-related task.', target: 1, rewards: { exp: 20, gp: 20 }, icon: 'languages', tracker: () => gameState.completedDailyTasks.filter(id => (dailyTasks.find(t=>t.id===id) || {}).category?.startsWith('english')).length },

    ], 

    weekly: [ 

        { id: 'w_01', title: 'Workout Warrior', description: 'Complete "Physical Training" 3 times.', target: 3, rewards: { exp: 150, gp: 200, hp: 5 }, icon: 'swords', tracker: () => gameState.questCounters?.physicalTraining || 0 }, 

        { id: 'w_02', title: 'Consistent Learner', description: 'Read 5 articles throughout the week.', target: 5, rewards: { exp: 100, gp: 150 }, icon: 'book-open-check', tracker: () => gameState.questCounters?.articlesRead || 0 }, 

        { id: 'w_03', title: 'Financial Focus', description: 'Track your expenses on 5 separate days this week.', target: 5, rewards: { exp: 100, gp: 150 }, icon: 'area-chart', tracker: () => { const start = getStartOfWeek(new Date()); return (gameState.questCounters?.expenseTrackedDays || []).filter(d => new Date(d) >= start).length; } }, 

        { id: 'w_04', title: 'Perfect Week Prep', description: 'Complete at least 15 daily tasks on 5 separate days.', target: 5, rewards: { exp: 200, gp: 300 }, icon: 'calendar-check-2', tracker: () => { const start = getStartOfWeek(new Date()); return (gameState.questCounters?.perfectDays || []).filter(d => new Date(d) >= start).length; } }, 

    ], 

    monthly: [ 

        { id: 'm_01', title: 'Page Turner', description: 'Read 2 full books.', target: 2, rewards: { exp: 400, gp: 500 }, icon: 'book-marked', tracker: () => gameState.questCounters?.booksRead || 0 }, 

        { id: 'm_02', title: 'Investment Initiative', description: 'Make 2 deposits into the Sloan Fund.', target: 2, rewards: { exp: 250, gp: 300 }, icon: 'piggy-bank', tracker: () => gameState.questCounters?.sloanDeposits || 0 }, 

        { id: 'm_03', title: 'GMAT Grinder', description: 'Complete 5 GMAT study projects.', target: 5, rewards: { exp: 300, gp: 400 }, icon: 'calculator', tracker: () => gameState.questCounters?.gmatProjects || 0 }, 

        { id: 'm_04', title: 'Creative Completion', description: 'Finish one personal art project.', target: 1, rewards: { exp: 350, gp: 450 }, icon: 'drafting-compass', tracker: () => gameState.questCounters?.artProjects || 0 }, 

    ], 

    yearly: [ 

        { id: 'y_01', title: 'Skill Mastery', description: 'Reach Level 10 in any Mastery Track.', target: 1, rewards: { exp: 2000, gp: 5000 }, icon: 'sparkles', tracker: () => Object.values(gameState.masteryTracks).some(t => t.level >= 10) ? 1 : 0 }, 

        { id: 'y_02', title: 'Grand Goal', description: 'Achieve one of your major Milestone Goals.', target: 1, rewards: { exp: 5000, gp: 10000 }, icon: 'trophy', tracker: () => { for(const track of Object.values(gameState.masteryTracks)){ for(const milestone of Object.values(track.milestones)){ if(milestone.current >= milestone.target) return 1; } } return 0; } }, 

        { id: 'y_03', title: 'Legendary Streak', description: 'Maintain a 100-day streak on any task.', target: 1, rewards: { exp: 3000, gp: 7500 }, icon: 'flame', tracker: () => Object.values(gameState.streaks).some(s => s.count >= 100) ? 1 : 0 }, 

    ], 

};

const dailyModifiers = [

    { text: "Intellectual Rush: +15% EXP from all English & Finance quests today.", category: ['english_reading', 'english_listening', 'english_speaking', 'finance_quant'], multiplier: 1.15, type: 'exp' },

    { text: "Wellness Focus: +25% GP from all Wellness quests today.", category: ['wellness'], multiplier: 1.25, type: 'gp' },

    { text: "Sloan Ambition: MIT Application quests grant +1 HP.", category: ['mit_application'], bonus: { hp: 1 }, type: 'bonus' }

];

const questChains = {

    'mit_app': {

        title: "Project: Sloan Ascent",

        icon: 'graduation-cap',

        steps: [

            { title: "Initial Brainstorming", description: "Outline key themes and stories for application essays.", completionCriteria: { type: 'manual' }, rewards: { exp: 100, gp: 150 } },

            { title: "Draft Cover Letter", description: "Write the first full draft of the Sloan cover letter.", completionCriteria: { type: 'quest', id: 'mit_03' }, rewards: { exp: 150, gp: 200 } },

            { title: "Request Recommendations", description: "Finalize recommenders and send official requests.", completionCriteria: { type: 'quest', id: 'mit_04' }, rewards: { exp: 100, gp: 250 } },

            { title: "Final Essay Polish", description: "Complete the final review and proofreading of all essays.", completionCriteria: { type: 'manual' }, rewards: { exp: 200, gp: 300 } },

            { title: "Submit Application", description: "Submit the complete application package to MIT Sloan.", completionCriteria: { type: 'manual' }, rewards: { exp: 1000, gp: 2000, maxHp: 2 } }

        ]

    }

};



// --- FIREBASE & DATA HANDLING ---

let saveDataTimeout = null;

function saveData() {

    if (saveDataTimeout) clearTimeout(saveDataTimeout);

    saveDataTimeout = setTimeout(async () => {

        if (userId) {

            try {

                // To avoid storing serverTimestamp in the local state object before saving

                const dataToSave = deepClone(gameState);

                if (dataToSave.createdAt && typeof dataToSave.createdAt !== 'string') {

                    dataToSave.createdAt = serverTimestamp();

                }

                await setDoc(doc(db, "artifacts", appId, "users", userId, "game", "state"), dataToSave);

            } catch (error) {

                console.error("Error saving data:", error);

            }

        }

    }, 2000); // Debounce save requests by 2 seconds

}



function handleDataSnapshot(docSnap) {

    // Step 1: Always update local state from Firestore snapshot

    if (docSnap.exists()) {

        const loadedData = docSnap.data();

        if (loadedData.createdAt instanceof Timestamp) loadedData.createdAt = dateToISO(loadedData.createdAt.toDate());

        if (loadedData.finances?.lastSalaryCheck instanceof Timestamp) loadedData.finances.lastSalaryCheck = dateToISO(loadedData.finances.lastSalaryCheck.toDate());

        gameState = { ...deepClone(initialGameState), ...loadedData };

        if (!gameState.mindPalaceEntries) gameState.mindPalaceEntries = [];

        if (!gameState.questChains) gameState.questChains = initialGameState.questChains; // Ensure quest chain data exists

        

    } else if (isInitialLoad) { // Only matters on first load if profile doesn't exist

        console.log("No user data found, creating new profile.");

        gameState = deepClone(initialGameState);

    }

    

    // Step 2: Run one-time setup logic ONLY on initial load

    if (isInitialLoad) {

        isInitialLoad = false; // Prevent this block from ever running again

        

        let needsSave = !docSnap.exists(); // If profile didn't exist, we need to save it

        

        const resetsChangedData = checkAllResets();

        const offlineProgressChangedData = processOfflineProgress();

        

        // Always update lastLogin timestamp

        gameState.lastLogin = new Date().toISOString();

        

        if (needsSave || resetsChangedData || offlineProgressChangedData) {

            saveData();

        }

        

        // Hide loading overlay after initial setup

        dom.loadingOverlay.style.opacity = '0';

        setTimeout(() => dom.loadingOverlay.style.display = 'none', 300);

    }

    

    // Step 3: Always update the UI based on the new gameState

    applyTheme(gameState.theme || 'light');

    updateUI();

}

// --- THEME ---

function applyTheme(theme) { document.documentElement.dataset.theme = theme; const themeIcon = document.getElementById('theme-icon'); if(themeIcon) { themeIcon.setAttribute('data-lucide', (theme === 'light' || theme === 'stardew' || theme === 'fox-den') ? 'moon' : 'sun'); } const rootStyle = getComputedStyle(document.documentElement); const bgMain = rootStyle.getPropertyValue('--bg-main').trim(); const tempDiv = document.createElement('div'); tempDiv.style.color = bgMain; document.body.appendChild(tempDiv); const rgbColor = getComputedStyle(tempDiv).color; document.body.removeChild(tempDiv); const rgbValues = rgbColor.match(/\d+/g).join(', '); document.documentElement.style.setProperty('--bg-main-rgb', rgbValues); renderThemeSelector(); }

window.toggleTheme = () => { let newTheme = (gameState.theme === 'light' || gameState.theme === 'stardew' || gameState.theme === 'fox-den') ? 'dark' : 'light'; gameState.theme = newTheme; applyTheme(gameState.theme); playSound(newTheme === 'dark' ? "F4" : "A4", "16n"); saveData(); }

window.selectTheme = (themeName) => { gameState.theme = themeName; playSound("C5", "16n"); applyTheme(themeName); saveData(); };



// --- GAME LOGIC ---

function triggerStatPopup(amount, type, bonusText = '') { const container = type === 'gp' ? dom.gpPopupContainer : dom.expPopupContainer; const popup = document.createElement('div'); popup.textContent = `+${amount} ${bonusText}`; popup.className = `stat-popup ${type === 'gp' ? 'text-green-500' : 'text-yellow-500'}`; container.appendChild(popup); setTimeout(() => popup.remove(), 1500); }

function completeDailyTask(taskId, taskType = 'daily') {

    if (gameState.completedDailyTasks.includes(taskId)) return;



    let taskSource = dailyTasks.concat(gameState.temporaryQuests);

    if (taskType === 'gremlin') taskSource = gremlinTasks;

    

    const task = taskSource.find(q => q.id === taskId);

    if (!task) return;



    playSound("G4", "16n");

    gameState.completedDailyTasks.push(taskId);



    let finalRewards = deepClone(task.rewards);



    // Apply active modifier

    if (gameState.activeModifier && taskType !== 'gremlin') {

        const modifier = gameState.activeModifier;

        if (modifier.category.includes(task.category)) {

            if (modifier.type === 'exp') finalRewards.exp = Math.round(finalRewards.exp * modifier.multiplier);

            if (modifier.type === 'gp') finalRewards.gp = Math.round(finalRewards.gp * modifier.multiplier);

            if (modifier.type === 'bonus' && modifier.bonus.hp) finalRewards.hp = (finalRewards.hp || 0) + modifier.bonus.hp;

        }

    }

    

    // Apply Astarion's Dagger effect

    if(gameState.activeEffects.doubleGpNextQuest) {

        finalRewards.gp *= 2;

        delete gameState.activeEffects.doubleGpNextQuest;

        showNotification('🩸', 'Blood Money', 'Astarion\'s Dagger doubles your GP reward!');

    }



    if (taskType === 'daily' || taskType === 'temporary') {

      if (task.streakable) updateStreak(taskId); 

      const todayISO = dateToISO(new Date()); 

      if(!gameState.dailyLogs[todayISO]) gameState.dailyLogs[todayISO] = { tasksCompleted: 0, categories: {} }; 

      gameState.dailyLogs[todayISO].tasksCompleted++;

      gameState.dailyLogs[todayISO].categories[task.category] = (gameState.dailyLogs[todayISO].categories[task.category] || 0) + 1;

      if(!gameState.stats) gameState.stats = { totalTasksCompleted: 0 }; 

      gameState.stats.totalTasksCompleted++; 

      if (task.id === 'w_01') updateQuestCounter('physicalTraining'); 

      if (task.id === 'er_01') updateQuestCounter('articlesRead'); 

      if (gameState.completedDailyTasks.length >= 15) { if (!gameState.questCounters.perfectDays.includes(todayISO)) { gameState.questCounters.perfectDays.push(todayISO); } }

      checkQuestChains(taskId);

    }

    

    if(taskType === 'temporary' && task.isBounty) {

        // If it's a bounty, give bonus rewards

        finalRewards.exp = Math.round(finalRewards.exp * 1.5);

        finalRewards.gp = Math.round(finalRewards.gp * 1.5);

    }





    addExp(finalRewards.exp); 

    addGp(finalRewards.gp); 

    addHp(finalRewards.hp || 0); 

    saveData(); 

}

function updateQuestCounter(counter, amount = 1) { if (!gameState.questCounters) gameState.questCounters = {}; gameState.questCounters[counter] = (gameState.questCounters[counter] || 0) + amount; }

function updateStreak(taskId) { const today = new Date(), yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000), todayISO = dateToISO(today), yesterdayISO = dateToISO(yesterday); const currentStreak = gameState.streaks[taskId] || { count: 0, lastCompleted: '' }; if (currentStreak.lastCompleted === yesterdayISO) { currentStreak.count++; const bonusGP = currentStreak.count * 5; showNotification('🔥', 'Streak Extended!', `You're on a ${currentStreak.count}-day streak! +${bonusGP} GP bonus!`); addGp(bonusGP); } else if (currentStreak.lastCompleted !== todayISO) { currentStreak.count = 1; } currentStreak.lastCompleted = todayISO; gameState.streaks[taskId] = currentStreak; }

function addExp(amount) { let bonusText = ''; if (gameState.activeEffects.flowStateUntil && Date.now() < gameState.activeEffects.flowStateUntil) { amount = Math.round(amount * 1.25); bonusText = '(Flow)'; } if(amount > 0) { gameState.exp += amount; triggerStatPopup(amount, 'exp', bonusText); } while (gameState.exp >= gameState.expToNextLevel) { levelUp(); } }

function addGp(amount) { let bonusText = ''; if (gameState.activeEffects.flowStateUntil && Date.now() < gameState.activeEffects.flowStateUntil) { amount = Math.round(amount * 1.25); bonusText = '(Flow)'; } if (amount > 0) { gameState.gp += amount; triggerStatPopup(amount, 'gp', bonusText); } }

function addHp(amount) { if (amount !== 0) { gameState.hp = Math.max(0, Math.min(gameState.maxHp, gameState.hp + amount)); } }

function levelUp() { gameState.level++; gameState.exp -= gameState.expToNextLevel; gameState.expToNextLevel = Math.floor(gameState.expToNextLevel * 1.5); gameState.maxHp += 2; gameState.hp = gameState.maxHp; showNotification('🎉', 'Level Up!', `You're now Level ${gameState.level}! Max wellness increased!`); playSound("C5", "4n"); }



// --- UI AND MODAL FUNCTIONS ---

function updateClock() {

    const now = new Date();

    dom.systemTime.textContent = now.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false, timeZone: 'Asia/Taipei' });

    dom.systemDate.textContent = now.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric', timeZone: 'Asia/Taipei' });

}

function showNotification(icon, title, message) { dom.modal.classList.remove('focus-mode', 'break-mode'); document.getElementById('modal-backdrop-blur').classList.remove('hidden'); dom.modalContent.innerHTML = `<div class="modal-icon">${icon.startsWith('<i') ? icon : `<p class="text-3xl">${icon}</p>`}</div><h2 class="text-2xl font-bold mb-2 font-heading">${title}</h2><p class="text-md mb-6" style="color: var(--text-secondary);">${message}</p><button onclick="closeModal()" class="cozy-button w-full">Continue</button>`; dom.modal.classList.add('visible'); lucide.createIcons(); }

function showConfirmation(icon, title, message, onConfirm) { dom.modal.classList.remove('focus-mode', 'break-mode'); document.getElementById('modal-backdrop-blur').classList.remove('hidden'); dom.modalContent.innerHTML = `<div class="modal-icon">${icon.startsWith('<i') ? icon : `<p class="text-3xl">${icon}</p>`}</div><h2 class="text-2xl font-bold mb-2 font-heading">${title}</h2><p class="text-md mb-6" style="color: var(--text-secondary);">${message}</p><div class="flex gap-4 justify-center"><button onclick="closeModal()" class="flex-grow text-center text-sm py-3 px-4 rounded-lg font-semibold" style="background-color: var(--bg-secondary); color: var(--text-secondary);">Cancel</button><button id="confirm-btn" class="cozy-button flex-grow !py-3">Confirm</button></div>`; dom.modal.classList.add('visible'); document.getElementById('confirm-btn').onclick = () => { onConfirm(); closeModal(); }; lucide.createIcons(); }

function showGuide() { dom.modalContent.innerHTML = `<div class="text-left text-sm max-h-[60vh] overflow-y-auto pr-2"><h2 class="text-xl font-bold mb-2 text-center font-heading">The Gamification of Life</h2><p class="text-xs text-center mb-4">This dashboard is your personal "game of life," designed to enhance focus and motivation.</p><h3 class="text-lg font-bold mt-4 mb-2 font-heading">Your Daily Mission</h3><p class="text-xs">Your quest list is an integrated daily mission, inspired by high-performance routines. Consistency is key to achieving elite goals like admission to MIT Sloan.</p><h3 class="text-lg font-bold mt-4 mb-2 font-heading">Core Principles</h3><ul class="list-disc pl-4 space-y-1 text-xs"><li><strong>Focus Chamber:</strong> Use the floating brain button to start a customizable Pomodoro-style focus session.</li><li><strong>Skill Trees:</strong> Level up skills to unlock powerful passive perks.</li><li><strong>Dynamic Agenda:</strong> Schedule your real-life tasks and get rewarded for completing them.</li><li><strong>Clear Goals:</strong> The Goals tab helps track long-term progress.</li><li><strong>Rest & Recovery:</strong> Use "Rest Day" on your days off to prevent burnout.</li><li><strong>Rewards:</strong> Use Growth Points (GP) in the Cozy Corner to reward your hard work.</li></ul></div><button onclick="closeModal()" class="cozy-button mt-6 w-full">Close</button>`; dom.modal.classList.add('visible'); }

function closeModal() { 

    if (timerState.running && timerState.mode === 'focus') {

        if(timerState.isHardMode){

            showConfirmation('🛑', 'Abort Session?', `You will forfeit your stake of ${timerState.stakedAmount} GP. Are you sure?`, () => {

                abortFocusSession();

                dom.modal.classList.remove('visible', 'focus-mode', 'break-mode');

            });

            return; // Don't close modal yet, wait for confirmation

        }

    }

    abortFocusSession(); // Abort non-hard-mode sessions silently

    dom.modal.classList.remove('visible', 'focus-mode', 'break-mode'); 

}



// --- TIME & STATE MANAGEMENT ---

function applyDailyModifier() { const modifier = dailyModifiers[Math.floor(Math.random() * dailyModifiers.length)]; gameState.activeModifier = modifier; }

function generatePreparatoryQuests() { const today = dateToISO(new Date()); const todaysEvents = gameState.schedule.filter(e => e.date === today && !e.completed); todaysEvents.forEach(event => { if (event.category === 'Study' || event.title.toLowerCase().includes('gmat')) { const prepQuestId = `prep_${event.id}`; if (!gameState.completedDailyTasks.includes(prepQuestId)) { gameState.temporaryQuests.push({ id: prepQuestId, title: `Prepare for: ${event.title}`, rewards: { exp: 15, gp: 10 }, category: 'preparation', priority: 'medium' }); } } }); }

function generateBountyQuests() {

    const threeDaysAgo = new Date();

    threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);

    const dateStr = dateToISO(threeDaysAgo);

    let recentCategories = new Set();

    Object.keys(gameState.dailyLogs).forEach(logDate => {

        if(logDate >= dateStr) {

            Object.keys(gameState.dailyLogs[logDate].categories).forEach(cat => recentCategories.add(cat));

        }

    });



    if(!recentCategories.has('wellness')) {

         gameState.temporaryQuests.push({ id: `bounty_${Date.now()}`, title: `Bounty: Wellness Check`, description: 'Complete any Wellness task for a bonus.', rewards: { exp: 30, gp: 50 }, category: 'wellness', priority: 'medium', isBounty: true });

    }

}



function checkAllResets() { 

    const now = new Date(); 

    const today = dateToISO(now); 

    let dataChanged = false; 



    // Birthday Check for Fox Den theme

    if (now.getMonth() === 3 && now.getDate() === 15) { // April 15th

        if (!gameState.unlockedThemes.includes('fox-den')) {

            gameState.unlockedThemes.push('fox-den');

            showNotification('🦊', 'Happy Birthday!', 'The special "Fox Den" theme has been unlocked for you!');

            dataChanged = true;

        }

    }



    // Daily Reset

    if (gameState.lastQuestReset.daily !== today) { 

        // HP penalty for failed high-priority tasks

        let hpLost = 0;

        (gameState.lastDailyTasks || []).forEach(task => {

            if (!gameState.completedDailyTasks.includes(task.id) && task.hpCostOnFail) {

                hpLost += task.hpCostOnFail;

            }

        });

        if (hpLost > 0) {

            addHp(-hpLost);

            showNotification('💔', 'Tasks Neglected', `You lost ${hpLost} HP for not completing high-priority tasks.`);

        }



        gameState.lastDailyTasks = [...dailyTasks]; // Store for next day's check

        gameState.completedDailyTasks = []; 

        gameState.temporaryQuests = [];

        gameState.activeEffects = { flowStateUntil: null };

        let hpRecovery = gameState.maxHp;

        const hpRegenRelic = gameState.relics.equipped.find(r => r.value.type === 'hp_regen');

        if (hpRegenRelic) hpRecovery += hpRegenRelic.value.amount;

        gameState.hp = hpRecovery;



        Object.keys(gameState.recurringQuestsState).forEach(key => { if (key.startsWith('d_')) delete gameState.recurringQuestsState[key]; }); 

        gameState.lastQuestReset.daily = today; 

        

        applyDailyModifier();

        generatePreparatoryQuests();

        generateBountyQuests();

        dataChanged = true; 

    } 

    

    // Weekly Reset

    const startOfWeek = dateToISO(getStartOfWeek(now)); 

    if (gameState.lastQuestReset.weekly !== startOfWeek) { 

        Object.keys(gameState.recurringQuestsState).forEach(key => { if (key.startsWith('w_')) delete gameState.recurringQuestsState[key]; }); 

        if (gameState.questCounters) { 

            gameState.questCounters.physicalTraining = 0; 

            gameState.questCounters.articlesRead = 0; 

            const startOfWeekDate = getStartOfWeek(new Date()); 

            gameState.questCounters.expenseTrackedDays = (gameState.questCounters.expenseTrackedDays || []).filter(d => new Date(d) >= startOfWeekDate); 

            gameState.questCounters.perfectDays = (gameState.questCounters.perfectDays || []).filter(d => new Date(d) >= startOfWeekDate); 

        } 

        gameState.lastQuestReset.weekly = startOfWeek; 

        dataChanged = true; 

    } 

    

    // Monthly Reset

    const startOfMonth = today.substring(0, 7); 

    if (gameState.lastQuestReset.monthly !== startOfMonth) { 

        Object.keys(gameState.recurringQuestsState).forEach(key => { if (key.startsWith('m_')) delete gameState.recurringQuestsState[key]; }); 

        if (gameState.questCounters) { 

            gameState.questCounters.sloanDeposits = 0; 

            gameState.questCounters.gmatProjects = 0; 

            gameState.questCounters.artProjects = 0; 

            gameState.questCounters.booksRead = 0;

        } 

        gameState.lastQuestReset.monthly = startOfMonth; 

        dataChanged = true; 

    } 

    

    // Yearly Reset

    const startOfYear = today.substring(0, 4); 

    if (gameState.lastQuestReset.yearly !== startOfYear) { 

        Object.keys(gameState.recurringQuestsState).forEach(key => { if (key.startsWith('y_')) delete gameState.recurringQuestsState[key]; }); 

        gameState.lastQuestReset.yearly = startOfYear; 

        dataChanged = true; 

    } 

    

    return dataChanged;

}

function processOfflineProgress() { 

    const today = new Date(); 

    let lastCheck = new Date(gameState.finances.lastSalaryCheck); 

    let salaryDeposited = false; 

    while(lastCheck < today) { 

        lastCheck.setDate(lastCheck.getDate() + 1); 

        if (lastCheck.getDate() === 10) { 

            gameState.finances.transactions.unshift({ type: 'income', desc: 'Monthly Salary', amount: 32000, category: 'Salary', date: dateToISO(lastCheck) }); 

            salaryDeposited = true; 

        } 

    } 

    if (salaryDeposited) { 

        showNotification('💰', 'Salary Deposited!', 'Your 32,000 NTD monthly salary has been added to your account.'); 

        playSound("A4", "8n"); 

    } 

    gameState.finances.lastSalaryCheck = dateToISO(today); 

    return salaryDeposited;

}

window.toggleRestDay = () => { 

    gameState.isRestDay = !gameState.isRestDay; 

    if(gameState.isRestDay) { 

        if (gameState.isGremlinMode) gameState.isGremlinMode = false;

        let bonusGP = 20;

        const hoodieRelic = gameState.relics.equipped.find(r => r.value.type === 'rest_day_bonus');

        if(hoodieRelic) bonusGP += hoodieRelic.value.amount;

        playSound("E4"); addGp(bonusGP); 

    } else { 

        playSound("C4"); 

    } 

    saveData(); 

}

window.toggleGremlinMode = () => {

    gameState.isGremlinMode = !gameState.isGremlinMode;

    if (gameState.isGremlinMode) {

        if (gameState.isRestDay) gameState.isRestDay = false;

        playSound("E3");

    } else {

        playSound("C4");

    }

    saveData();

}



// --- RENDER FUNCTIONS ---

function renderDailyTasks() { 

    dom.dailyTasksContainer.innerHTML = ''; 



    if (gameState.isGremlinMode) {

        const tasksHTML = gremlinTasks.map(task => {

            const isCompleted = gameState.completedDailyTasks.includes(task.id);

            return `<div class="quest-container"> <input type="checkbox" id="${task.id}" class="quest-checkbox hidden" onchange="completeDailyTask('${task.id}', 'gremlin')" ${isCompleted ? 'checked' : ''}> <label for="${task.id}" class="quest-item flex items-center w-full cursor-pointer"> <div class="custom-checkbox mr-4"></div><div class="flex-grow"><span class="quest-title font-medium">${task.title}</span></div><span class="text-xs font-bold px-2 py-1 rounded-full ml-2 quest-reward-bubble">+${task.rewards.exp} EXP</span> </label> </div>`;

        }).join('');

        dom.dailyTasksContainer.innerHTML = `<div><h4 class="text-lg font-bold quest-category-title">Gremlin Mode</h4><div class="space-y-3">${tasksHTML}</div></div>`;

        dom.dailyModifierContainer.classList.add('hidden');

        lucide.createIcons();

        return;

    }



    const allTasks = [...(gameState.temporaryQuests || []), ...dailyTasks].sort((a,b) => (b.priority === 'high' ? 1 : 0) - (a.priority === 'high' ? 1 : 0) );

    const categories = { preparation: [], bounty: [], foundations: [], wellness: [], english_reading: [], english_listening: [], english_speaking: [], finance_quant: [], mit_application: [], career: [] }; 

    const titles = { preparation: 'Dynamic Directives', bounty: 'Bounties', foundations: 'Daily Foundations', wellness: 'Wellness & Self-Care', english_reading: 'English: Reading & Vocab', english_listening: 'English: Listening & Watching', english_speaking: 'English: Speaking & Writing', finance_quant: 'Finance & Quantitative Skills', mit_application: 'MIT Application Prep', career: 'Career & Professional' }; 

    allTasks.forEach(q => { 

        const category = q.isBounty ? 'bounty' : q.category;

        if(category && categories[category]) categories[category].push(q); 

    }); 

    let containerHTML = ''; 

    for (const category in categories) { 

        if (categories[category].length === 0) continue; 

        let tasksHTML = categories[category].map((task) => { 

            const isTemporary = task.category === 'preparation' || task.isBounty;

            const isCompleted = gameState.completedDailyTasks.includes(task.id); 

            const isDisabled = gameState.isRestDay && !isTemporary && (task.category === 'mit_application' || task.category === 'career' || task.category === 'finance_quant'); 

            let streakIndicator = ''; 

            if (task.streakable) { const streak = gameState.streaks[task.id]?.count || 0; if (streak > 0) streakIndicator = `<span class="flex items-center text-xs font-bold text-orange-500 ml-2"><i data-lucide="flame" class="w-3.5 h-3.5 mr-1"></i>${streak}</span>`; } 

            let priorityClass = task.priority ? `priority-${task.priority}` : '';

            let penaltyIndicator = task.hpCostOnFail ? `<span class="text-xs font-bold text-red-500 ml-2"><i data-lucide="shield-alert" class="w-3.5 h-3.5"></i></span>` : '';

            return `<div class="quest-container ${isDisabled ? 'opacity-50' : ''}"> <input type="checkbox" id="${task.id}" class="quest-checkbox hidden" onchange="completeDailyTask('${task.id}', '${isTemporary ? 'temporary' : 'daily'}')" ${isCompleted ? 'checked' : ''} ${isDisabled ? 'disabled' : ''}> <label for="${task.id}" class="quest-item flex items-center w-full cursor-pointer ${priorityClass}"> <div class="custom-checkbox mr-4"></div><div class="flex-grow"><span class="quest-title font-medium">${task.title}</span></div> ${penaltyIndicator} ${streakIndicator} <span class="text-xs font-bold px-2 py-1 rounded-full ml-2 quest-reward-bubble">+${task.rewards.exp} EXP</span> </label> </div>`; 

        }).join(''); 

        containerHTML += `<div><h4 class="text-lg font-bold quest-category-title">${titles[category]}</h4><div class="space-y-3">${tasksHTML}</div></div>`; 

    } 

    dom.dailyTasksContainer.innerHTML = containerHTML; 

    

    if (gameState.activeModifier) {

        dom.dailyModifier.textContent = gameState.activeModifier.text;

        dom.dailyModifierContainer.classList.remove('hidden');

    } else {

        dom.dailyModifierContainer.classList.add('hidden');

    }



    lucide.createIcons(); 

}

let expenseChartInstance = null; const categoryIcons = { Food: 'utensils', Transport: 'bus', Art: 'palette', Edu: 'graduation-cap', Fun: 'gamepad-2', Other: 'tag', Salary: 'briefcase', Savings: 'piggy-bank' };

function renderFinancialSummary() { const income = (gameState.finances.transactions || []).filter(t => t.type === 'income').reduce((s, t) => s + t.amount, 0); const expenses = (gameState.finances.transactions || []).filter(t => t.type === 'expense').reduce((s, t) => s + t.amount, 0); dom.totalIncome.textContent = `+${income.toLocaleString()}`; dom.totalExpenses.textContent = `-${expenses.toLocaleString()}`; dom.netBalance.textContent = (income - expenses).toLocaleString(); }

function renderTransactionList() { dom.transactionList.innerHTML = (gameState.finances.transactions || []).map((t, index) => { const colorClass = t.type === 'income' ? 'text-green-600' : (t.type === 'savings' ? 'text-blue-600' : 'text-red-600'); const sign = t.type === 'income' ? '+' : '-'; const icon = categoryIcons[t.category] || 'tag'; return `<div class="flex justify-between items-center text-xs p-1.5 border-b" style="border-color: var(--border-color);"><div class="flex items-center gap-2"> <i data-lucide="${icon}" class="w-4 h-4 ${colorClass}"></i> <span>${t.desc}</span> </div><div class="flex items-center gap-2"> <span class="font-semibold ${colorClass}">${sign}${t.amount.toLocaleString()}</span> <button onclick="deleteTransaction(${index})" class="text-gray-400 hover:text-red-500"><i data-lucide="trash-2" class="w-3.5 h-3.5"></i></button> </div></div>`; }).join('') || `<p class="text-xs text-center py-4" style="color:var(--text-secondary);">No transactions yet.</p>`; lucide.createIcons(); }

function updateExpenseChart() { const catTotals = (gameState.finances.transactions || []).filter(t => t.type === 'expense').reduce((a, e) => { a[e.category] = (a[e.category] || 0) + e.amount; return a; }, {}); const chartData = { labels: Object.keys(catTotals), datasets: [{ data: Object.values(catTotals), backgroundColor: ['#FFC107', '#4CAF50', '#2196F3', '#F44336', '#9C27B0', '#795548'], borderWidth: 0 }] }; if (expenseChartInstance) { expenseChartInstance.data = chartData; expenseChartInstance.update(); } else { expenseChartInstance = new Chart(document.getElementById('expense-chart').getContext('2d'), { type: 'doughnut', data: chartData, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } } } }); } }

function renderSloanFund() { const fund = gameState.finances.mitSloanFund; const goal = gameState.masteryTracks.finance.milestones.sloanfund.target; gameState.masteryTracks.finance.milestones.sloanfund.current = fund; dom.mitFundCurrent.textContent = `${fund.toLocaleString()}`; dom.mitFundGoal.textContent = `${goal.toLocaleString()}`; dom.mitFundBar.style.width = `${Math.max(1, (fund / goal) * 100)}%`; }

function renderRewards() { dom.rewardsList.innerHTML = (gameState.rewards || []).sort((a,b) => a.cost - b.cost).map((r, i) => { const icon = r.icon || 'gift'; let effectHtml = `<p class="text-xs" style="color:var(--text-secondary);">${r.description || ''}</p>`; return `<div class="cozy-card p-3 flex flex-col justify-between text-center"><div> <i data-lucide="${icon}" class="w-8 h-8 mx-auto mb-2" style="color: var(--accent-primary);"></i> <p class="font-semibold text-sm">${r.name}</p> ${effectHtml} </div><button onclick="confirmClaimReward(${i})" class="cozy-button mt-2 w-full text-xs !py-1.5" ${gameState.gp < r.cost ? 'disabled' : ''}>${r.cost} GP</button></div>`; }).join(''); lucide.createIcons(); }

function renderGachapons() { dom.gachaponContainer.innerHTML = Object.entries(gameState.gachapons).map(([id, gacha]) => ` <div class="cozy-card text-center"> <h3 class="text-lg font-bold font-heading mb-1">${gacha.name}</h3> <p class="text-xs mb-4" style="color: var(--text-secondary);">Test your luck for rare items!</p> <i data-lucide="${gacha.name === 'Culinary Crate' ? 'utensils' : 'box'}" class="w-16 h-16 mx-auto mb-4" style="color:var(--accent-secondary);"></i> <button onclick="pullGachapon('${id}')" class="cozy-button w-full" ${gameState.gp < gacha.cost ? 'disabled' : ''}>Pull ( ${gacha.cost} GP )</button> </div> `).join(''); lucide.createIcons(); }

function renderInventory() { dom.inventoryContainer.innerHTML = (gameState.inventory || []).map((item, index) => ` <div class="inventory-item flex flex-col items-center" onclick="showItemInfo(${index})"> <div class="inventory-icon w-12 h-12 rounded-lg flex items-center justify-center transition-transform" style="background-color:var(--bg-secondary);"> <i data-lucide="${item.icon}" style="color:var(--accent-primary);"></i> </div> <p class="text-xs mt-1 truncate w-full">${item.name}</p> </div> `).join('') || `<p class="col-span-4 text-xs text-center" style="color:var(--text-secondary);">Your inventory is empty.</p>`; lucide.createIcons(); }

function renderRelics() { 

    dom.relicsContainer.innerHTML = (gameState.relics.equipped || []).map((relic, index) => {

        let cooldownHTML = '';

        if (relic.isActive && relic.lastUsed) {

            const now = Date.now();

            const cooldownEnd = new Date(relic.lastUsed).getTime() + (relic.cooldown * 1000);

            if (now < cooldownEnd) {

                const timeLeft = Math.ceil((cooldownEnd - now) / 1000 / 60); // minutes

                cooldownHTML = `<div class="relic-cooldown">${timeLeft > 60 ? Math.round(timeLeft/60)+'h' : timeLeft+'m' }</div>`;

            }

        }

        const clickAction = relic.isActive ? `activateRelic(${index})` : `showRelicInfo(${index})`;

        return `

        <div class="relic-item flex flex-col items-center relative" onclick="${clickAction}">

            <div class="relic-icon w-12 h-12 rounded-lg flex items-center justify-center transition-transform" style="background-color:var(--bg-secondary);">

                <i data-lucide="${relic.icon}" class="rarity-${relic.rarity}"></i>

            </div>

            <p class="text-xs mt-1 truncate w-full">${relic.name}</p>

            ${cooldownHTML}

        </div>`;

    }).join('') || `<p class="col-span-4 text-xs text-center" style="color:var(--text-secondary);">No relics equipped.</p>`; 

    lucide.createIcons(); 

}

function renderStatsSnapshot() { const longestStreak = Math.max(0, ...Object.values(gameState.streaks).map(s => s.count)); const tasksToday = gameState.completedDailyTasks.length; const totalTasks = gameState.stats?.totalTasksCompleted || 0; dom.statsSnapshotCard.innerHTML = ` <h3 class="text-xl font-bold font-heading mb-4 text-center">Stats Snapshot</h3> <div class="grid grid-cols-3 gap-2 text-center"> <div class="stat-item"> <p class="text-2xl stat-value">${tasksToday}</p> <p class="text-xs" style="color:var(--text-secondary);">Tasks Today</p> </div> <div class="stat-item"> <p class="text-2xl stat-value">${longestStreak}</p> <p class="text-xs" style="color:var(--text-secondary);">Longest Streak</p> </div> <div class="stat-item"> <p class="text-2xl stat-value">${totalTasks}</p> <p class="text-xs" style="color:var(--text-secondary);">Total Done</p> </div> </div> `; }

function renderThemeSelector() {

    const themes = {

        light: { name: 'Default Light', icon: 'sun' },

        dark: { name: 'Default Dark', icon: 'moon' },

        inkopolis: { name: 'Inkopolis', icon: 'splat' },

        stardew: { name: 'Stardew', icon: 'sprout' },

        'baldurs-gate': { name: 'Baldur\'s Gate', icon: 'swords' },

        'fox-den': { name: 'Fox Den', icon: 'cat' },

    };

    dom.themeSelectorContainer.innerHTML = (gameState.unlockedThemes || []).map(themeId => {

        const theme = themes[themeId];

        if (!theme) return '';

        const isActive = gameState.theme === themeId;

        return `<button onclick="selectTheme('${themeId}')" class="theme-toggle-btn p-2 rounded-lg flex flex-col items-center text-xs gap-1 ${isActive ? 'active' : ''}"><i data-lucide="${theme.icon}"></i><span>${theme.name}</span></button>`;

    }).join('');

    lucide.createIcons();

}



// --- AGENDA & CALENDAR LOGIC ---

function renderCalendar() { dom.calendarHeader.textContent = `${calendarDate.toLocaleString('en-US', { month: 'long' })} ${calendarDate.getFullYear()}`; dom.calendarGrid.innerHTML = ''; const year = calendarDate.getFullYear(); const month = calendarDate.getMonth(); const firstDay = new Date(year, month, 1).getDay(); const daysInMonth = new Date(year, month + 1, 0).getDate(); for (let i = 0; i < firstDay; i++) { dom.calendarGrid.innerHTML += `<div></div>`; } for (let day = 1; day <= daysInMonth; day++) { const monthStr = (month + 1).toString().padStart(2, '0'); const dayStr = day.toString().padStart(2, '0'); const dateISO = `${year}-${monthStr}-${dayStr}`; const eventsOnDay = (gameState.schedule || []).filter(e => e.date === dateISO); let dayClasses = 'calendar-day text-center p-2 rounded-full cursor-pointer relative'; if (dateISO === selectedDate) dayClasses += ' selected'; else if (dateISO === dateToISO(new Date())) dayClasses += ' bg-orange-100'; let dotsHTML = ''; if (eventsOnDay.length > 0) { const uniqueCategories = [...new Set(eventsOnDay.map(e => e.category))]; dotsHTML = `<div class="event-dots">${uniqueCategories.slice(0, 4).map(cat => `<div class="event-dot" style="background-color:${eventCategories[cat]?.color || 'gray'}"></div>`).join('')}</div>`; } dom.calendarGrid.innerHTML += `<div class="${dayClasses}" onclick="selectDate('${dateISO}')"><span>${day}</span>${dotsHTML}</div>`; } }

function renderAgenda(dateISO) {

    const todayISO = dateToISO(new Date());

    dom.agendaHeader.textContent = dateISO === todayISO ? "Today's Agenda" : `Agenda for ${dateISO.split('-').join('/')}`;

    const events = (gameState.schedule || []).filter(e => e.date === dateISO).sort((a,b) => a.time.localeCompare(b.time));

    const hourHeight = 50;

    dom.timelineContainer.innerHTML = '';

    dom.timelineContainer.style.height = `${(22-6) * hourHeight}px`;



    for (let i = 6; i <= 22; i++) {

        const hourDiv = document.createElement('div');

        hourDiv.className = 'absolute w-full border-t border-dashed';

        hourDiv.style.borderColor = 'var(--border-color)';

        hourDiv.style.top = `${(i - 6) * hourHeight}px`;

        

        const timeLabel = document.createElement('div');

        timeLabel.className = 'absolute -left-10 text-xs';

        timeLabel.textContent = `${i % 12 === 0 ? 12 : i % 12}${i < 12 || i === 24 ? 'am' : 'pm'}`;

        timeLabel.style.color = 'var(--text-secondary)';

        timeLabel.style.top = `${(i - 6) * hourHeight - 8}px`;

        

        dom.timelineContainer.appendChild(hourDiv);

        dom.timelineContainer.appendChild(timeLabel);



        const clickableHour = document.createElement('div');

        clickableHour.className = 'absolute w-full cursor-pointer';

        clickableHour.style.height = `${hourHeight}px`;

        clickableHour.style.top = `${(i - 6) * hourHeight}px`;

        clickableHour.onclick = () => showAddEventModal(dateISO, `${i.toString().padStart(2, '0')}:00`);

        dom.timelineContainer.appendChild(clickableHour);

    }



    if (events.length > 0) {

        events.forEach(event => {

            const [hour, minute] = event.time.split(':').map(Number);

            const topPosition = ((hour - 6) + (minute / 60)) * hourHeight;

            const categoryStyle = eventCategories[event.category] || eventCategories.Personal;

            const eventDiv = document.createElement('div');

            eventDiv.className = `absolute left-12 right-0 p-2 rounded-lg flex items-start gap-2 ${categoryStyle.bg} border-l-4 ${categoryStyle.border} ${event.completed ? 'opacity-60' : ''}`;

            eventDiv.style.top = `${topPosition}px`;

            eventDiv.style.height = `${hourHeight - 4}px`;

            eventDiv.innerHTML = `<input type="checkbox" id="event-${event.id}" class="subtask-checkbox hidden" onchange="toggleEventCompletion('${event.id}')" ${event.completed ? 'checked' : ''}><label for="event-${event.id}" class="flex items-center cursor-pointer"><div class="w-5 h-5 mt-0.5 border-2 rounded-md flex-shrink-0" style="border-color:var(--accent-secondary);"></div></label><div class="flex-grow"><p class="font-bold text-sm ${event.completed ? 'line-through' : ''}">${event.title}</p><p class="text-xs" style="color: var(--text-secondary);">${event.time}</p></div><button onclick="deleteEvent('${event.id}')" class="text-gray-400 hover:text-red-500 shrink-0"><i data-lucide="trash-2" class="w-4 h-4"></i></button>`;

            dom.timelineContainer.appendChild(eventDiv);

        });

    } else {

        const noEventsMsg = document.createElement('div');

        noEventsMsg.className = 'absolute inset-0 flex items-center justify-center';

        noEventsMsg.style.pointerEvents = 'none'; // Make sure this layer doesn't block clicks

        noEventsMsg.innerHTML = `<p class="text-sm" style="color:var(--text-secondary);">No events scheduled. Click a time slot to add one.</p>`;

        dom.timelineContainer.appendChild(noEventsMsg);

    }

    lucide.createIcons();

}

function selectDate(dateISO) { selectedDate = dateISO; renderCalendar(); renderAgenda(dateISO); }

function showAddEventModal(date, time, eventToEdit = null) { const isEditing = eventToEdit !== null; const title = isEditing ? 'Edit Event' : 'Add Event'; const buttonText = isEditing ? 'Save Changes' : 'Schedule Event'; let categoryOptions = ''; for (const category in eventCategories) { categoryOptions += `<option value="${category}" ${isEditing && eventToEdit.category === category ? 'selected' : ''}>${category}</option>`; } dom.modalContent.innerHTML = `<h2 class="text-2xl font-bold mb-4 font-heading">${title}</h2> <form id="add-event-form" class="space-y-3 text-left"> <input type="hidden" name="eventId" value="${isEditing ? eventToEdit.id : ''}"> <div><label class="text-sm font-medium">Title</label><input type="text" name="title" placeholder="Event Title" class="styled-input mt-1" value="${isEditing ? eventToEdit.title : ''}" required></div> <div class="grid grid-cols-2 gap-3"><div><label class="text-sm font-medium">Date</label><input type="date" name="date" class="styled-input mt-1" value="${date}" required></div><div><label class="text-sm font-medium">Time</label><input type="time" name="time" class="styled-input mt-1" value="${time}" required></div></div> <div><label class="text-sm font-medium">Category</label><select name="category" class="styled-select mt-1">${categoryOptions}</select></div> <button type="submit" class="cozy-button w-full !mt-6">${buttonText}</button> </form>`; dom.modal.classList.add('visible'); document.getElementById('add-event-form').addEventListener('submit', handleAddEvent); }

function handleAddEvent(e) { e.preventDefault(); const form = e.target; const eventId = form.elements.eventId.value; const eventData = { title: form.elements.title.value, date: form.elements.date.value, time: form.elements.time.value, category: form.elements.category.value, completed: false }; if (eventId) { const eventIndex = gameState.schedule.findIndex(evt => evt.id === eventId); if (eventIndex !== -1) gameState.schedule[eventIndex] = { ...gameState.schedule[eventIndex], ...eventData }; } else { eventData.id = `evt_${Date.now()}`; gameState.schedule.push(eventData); } if (eventData.title && eventData.date && eventData.time) { playSound("C4"); saveData(); closeModal(); selectDate(eventData.date); } }

function toggleEventCompletion(eventId) { const event = gameState.schedule.find(e => e.id === eventId); if (!event) return; event.completed = !event.completed; const today = dateToISO(new Date()); if (event.completed && event.rewardClaimedOn !== today) { event.rewardClaimedOn = today; playSound("A4"); addExp(10); addGp(15); showNotification('✅', 'Task Complete!', '+10 EXP & +15 GP for staying on schedule!'); } else { playSound("E4"); } saveData(); }

function deleteEvent(eventId) { showConfirmation('🗑️', 'Delete Event?', 'Are you sure you want to delete this event?', () => { gameState.schedule = gameState.schedule.filter(e => e.id !== eventId); playSound("C3"); saveData(); }); }



// --- MASTERY TRACKS (GOALS) LOGIC ---

function renderMasteryTracks() { dom.goalsTab.innerHTML = Object.entries(gameState.masteryTracks).map(([trackId, track]) => { const progressPercent = (track.exp / track.expToNext) * 100; const milestonesHTML = Object.entries(track.milestones).map(([milestoneId, milestone]) => { const isCompleted = milestone.current >= milestone.target; return `<div class="milestone-item ${isCompleted ? 'completed' : ''}"> <div class="flex justify-between items-center text-sm"> <span>${milestone.title}</span> <span class="font-semibold">${milestone.current} / ${milestone.target} ${milestone.unit}</span> </div> </div>`; }).join(''); return ` <div class="cozy-card space-y-4"> <div class="flex items-center gap-4"> <i data-lucide="${track.icon}" class="w-8 h-8" style="color:var(--accent-primary);"></i> <div> <h3 class="text-xl font-bold font-heading">${track.title}</h3> <p class="text-sm font-semibold" style="color:var(--accent-secondary);">Level ${track.level}</p> </div> </div> <div> <div class="flex justify-between text-xs mb-1" style="color:var(--text-secondary);"> <span>Level Progress</span> <span>${track.exp} / ${track.expToNext} EXP</span> </div> <div class="w-full progress-bar-bg rounded-full h-2.5"><div class="progress-bar-fill h-2.5 rounded-full" style="width: ${progressPercent}%; background: var(--accent-secondary);"></div></div> </div> <div> <h4 class="font-bold mb-2">Milestones</h4> <div class="space-y-2">${milestonesHTML}</div> </div> <button onclick="showProjectsModal('${trackId}')" class="cozy-button w-full !py-2">Start a Project</button> </div> `; }).join(''); lucide.createIcons(); }

function showProjectsModal(trackId) { const track = gameState.masteryTracks[trackId]; const projectsHTML = track.projects.map(proj => ` <div class="cozy-card p-3 flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3"> <div class="flex-grow"> <p class="font-bold">${proj.title}</p> <p class="text-xs" style="color:var(--text-secondary);">${proj.description}</p> </div> <div class="flex items-center gap-3 w-full sm:w-auto"> <span class="text-xs font-semibold px-2 py-1 rounded" style="background-color: var(--bg-secondary);">🎁 ${proj.rewards.playerExp} EXP</span> <button onclick="completeProject('${trackId}', '${proj.id}')" class="cozy-button !text-sm !py-1.5 flex-shrink-0 w-full sm:w-auto">Complete</button> </div> </div> `).join(''); dom.modalContent.innerHTML = ` <div class="text-left max-h-[70vh] overflow-y-auto"> <h2 class="text-2xl font-bold mb-4 text-center font-heading">${track.title} Projects</h2> <div class="space-y-3">${projectsHTML}</div> <button onclick="closeModal()" class="cozy-button mt-6 w-full">Close</button> </div> `; dom.modal.classList.add('visible'); }

function completeProject(trackId, projectId) { 

    const track = gameState.masteryTracks[trackId]; 

    const project = track.projects.find(p => p.id === projectId); 

    if (!project) return; 



    let finalRewards = deepClone(project.rewards);

    const rapportRelic = gameState.relics.equipped.find(r => r.value.type === 'track_double_chance' && r.value.track === trackId);

    if(rapportRelic && Math.random() < rapportRelic.value.chance) {

        finalRewards.playerExp *= 2;

        showNotification('✨', 'Rapport!', 'Your relic activated, granting double Player EXP!');

    }



    addExp(finalRewards.playerExp); 

    addGp(finalRewards.gp); 

    track.exp += finalRewards.trackExp; 



    if (trackId === 'tests') updateQuestCounter('gmatProjects'); 

    if (trackId === 'art') updateQuestCounter('artProjects'); 

    if (track.exp >= track.expToNext) { 

        track.level++; 

        track.exp -= track.expToNext; 

        track.expToNext = Math.floor(track.expToNext * 1.6); 

        playSound("B4"); 

        showNotification('🚀', 'Mastery Level Up!', `${track.title} is now Level ${track.level}!`); 

    } else { 

        playSound("A4"); 

    } 

    closeModal(); 

    saveData(); 

}



// --- QUEST CHAINS ---

function renderQuestChains() {

    let html = '';

    for (const chainId in gameState.questChains) {

        const chainData = questChains[chainId];

        const chainState = gameState.questChains[chainId];

        if (chainState.currentStep >= chainData.steps.length) continue; // Chain is complete



        html += `<div class="cozy-card mb-4">

            <div class="flex items-center gap-3 mb-4">

                <i data-lucide="${chainData.icon}" class="w-6 h-6" style="color:var(--accent-primary);"></i>

                <h3 class="text-lg font-bold font-heading">${chainData.title}</h3>

            </div>

            <div>`;



        chainData.steps.forEach((step, index) => {

            let stepClass = 'quest-chain-step';

            let actionButton = '';

            if (index < chainState.currentStep) {

                stepClass += ' completed';

            } else if (index === chainState.currentStep) {

                stepClass += ' active';

                if(step.completionCriteria.type === 'manual') {

                    actionButton = `<button onclick="advanceQuestChain('${chainId}')" class="cozy-button !py-1 !px-3 text-xs">Complete Step</button>`;

                } else {

                    actionButton = `<span class="text-xs" style="color: var(--text-secondary);">Complete '${dailyTasks.find(q=>q.id===step.completionCriteria.id)?.title || ''}'</span>`;

                }

            }

            

            html += `<div class="${stepClass}">

                         <div class="flex justify-between items-center">

                             <div>

                                 <p class="font-semibold text-sm">${step.title}</p>

                                 <p class="text-xs" style="color: var(--text-secondary);">${step.description}</p>

                             </div>

                             ${actionButton}

                         </div>

                       </div>`;

        });



        html += `</div></div>`;

    }

    dom.questChainContainer.innerHTML = html;

}



function advanceQuestChain(chainId) {

    const chainState = gameState.questChains[chainId];

    const chainData = questChains[chainId];

    const currentStep = chainData.steps[chainState.currentStep];



    addExp(currentStep.rewards.exp || 0);

    addGp(currentStep.rewards.gp || 0);

    if(currentStep.rewards.maxHp) {

        gameState.maxHp += currentStep.rewards.maxHp;

        addHp(currentStep.rewards.maxHp);

    }



    chainState.currentStep++;

    showNotification('🚀', 'Quest Advanced!', `You completed: "${currentStep.title}"!`);

    playSound("B4");

    saveData();

}

window.advanceQuestChain = advanceQuestChain;



function checkQuestChains(completedQuestId) {

     for (const chainId in gameState.questChains) {

        const chainData = questChains[chainId];

        const chainState = gameState.questChains[chainId];

        if(chainState.currentStep < chainData.steps.length) {

            const currentStep = chainData.steps[chainState.currentStep];

            if(currentStep.completionCriteria.type === 'quest' && currentStep.completionCriteria.id === completedQuestId) {

                advanceQuestChain(chainId);

            }

        }

    }

}





// --- FOCUS TIMER ---

function showFocusModal() {

    dom.modalContent.innerHTML = `<div id="focus-chamber-content" class="text-center"></div>`;

    dom.modal.classList.add('visible');

    switchFocusTab('timer');

}



function switchFocusTab(tabName) {

    const chamberContent = document.getElementById('focus-chamber-content');

    

    // Populate dropdown for linking tasks

    let linkableTasksOptions = '<option value="">-- General Focus --</option>';

    const uncompletedQuests = dailyTasks.filter(q => !gameState.completedDailyTasks.includes(q.id) && /focus|block|read|write|solve|practice|research|draft/i.test(q.title));

    linkableTasksOptions += `<optgroup label="Daily Quests">`;

    uncompletedQuests.forEach(q => linkableTasksOptions += `<option value="quest|${q.id}">${q.title}</option>`);

    linkableTasksOptions += `</optgroup>`;

    for (const [trackId, track] of Object.entries(gameState.masteryTracks)) {

        linkableTasksOptions += `<optgroup label="${track.title}">`;

        track.projects.forEach(proj => linkableTasksOptions += `<option value="project|${trackId}|${proj.id}">${proj.title}</option>`);

        linkableTasksOptions += `</optgroup>`;

    }

    

    const { focus, shortBreak, longBreak } = gameState.timerSettings.customTimes;



    const tabsHTML = `<div class="flex border-b mb-3"><button onclick="switchFocusTab('timer')" class="focus-tab ${tabName === 'timer' ? 'active' : ''}">Timer</button><button onclick="switchFocusTab('log')" class="focus-tab ${tabName === 'log' ? 'active' : ''}">Log</button><button onclick="switchFocusTab('settings')" class="focus-tab ${tabName === 'settings' ? 'active' : ''}">Settings</button></div>`;



    let contentHTML = '';

    if (tabName === 'timer') {

        dom.modal.classList.remove('break-mode'); dom.modal.classList.add('focus-mode');

        contentHTML = `

            <p id="flow-cycle-display" class="text-sm font-semibold mb-1 text-purple-500"></p>

            <p id="timer-cycle-display" class="text-sm font-semibold mb-2" style="color:var(--accent-primary);"></p>

            <div class="relative w-48 h-48 mx-auto my-2">

                <svg class="w-full h-full" viewBox="0 0 100 100">

                    <circle stroke-width="7" stroke="var(--bg-secondary)" fill="transparent" r="45" cx="50" cy="50" />

                    <circle id="timer-progress-circle" stroke-width="7" stroke-linecap="round" stroke="var(--accent-secondary)" fill="transparent" r="45" cx="50" cy="50" style="transform: rotate(-90deg); transform-origin: 50% 50%; transition: stroke-dashoffset 1s linear;" />

                </svg>

                <div id="focus-timer-display" class="absolute inset-0 flex items-center justify-center text-4xl font-bold" style="font-family: var(--font-body); letter-spacing: -1px;"></div>

            </div>

            <select id="focus-task-select" class="styled-select text-sm mb-4">${linkableTasksOptions}</select>

            <div class="flex items-center justify-center gap-4">

                 <button onclick="resetTimer(true)" class="p-3 rounded-full" style="background-color: var(--bg-secondary); color: var(--text-secondary);"><i data-lucide="rotate-cw" class="w-5 h-5"></i></button>

                 <button onclick="toggleTimer()" id="timer-toggle-btn" class="cozy-button !rounded-full !w-16 !h-16 !p-0 text-2xl flex items-center justify-center"><i data-lucide="play" class="w-7 h-7"></i></button>

                 <div class="flex flex-col items-center">

                    <button id="auto-cycle-toggle" onclick="toggleAutoCycle()" class="relative inline-flex h-6 w-11 items-center rounded-full transition-colors" style="background-color: var(--bg-secondary);"><span id="auto-cycle-knob" class="inline-block h-4 w-4 transform rounded-full bg-white transition-transform" style="transform: translateX(4px);"></span></button>

                    <label class="text-xs mt-1" style="color:var(--text-secondary);">Auto</label>

                 </div>

            </div>`;

    } else if (tabName === 'log') {

        dom.modal.classList.remove('focus-mode', 'break-mode');

        const logEntries = (gameState.focusLog || []).slice(0, 10).map(entry => `

            <div class="text-left text-sm p-2 border-b" style="border-color:var(--border-color);">

                <p class="font-semibold">${entry.linkedTaskTitle || 'General Focus'}</p>

                <div class="flex justify-between text-xs" style="color:var(--text-secondary);">

                    <span>${new Date(entry.date).toLocaleString([], {short: 'short'})}</span>

                    <span>+${entry.rewards.exp} EXP, +${entry.rewards.gp} GP</span>

                </div>

            </div>`).join('') || `<p class="text-sm text-center py-8" style="color:var(--text-secondary);">No sessions logged yet.</p>`;

        contentHTML = `<div class="max-h-64 overflow-y-auto">${logEntries}</div>`;

    } else if (tabName === 'settings') {

        dom.modal.classList.remove('focus-mode', 'break-mode');

        const sound = gameState.timerSettings.ambientSound;

        contentHTML = `

            <div class="text-left space-y-4">

                <div>

                    <h4 class="font-bold mb-2">Timer Durations (minutes)</h4>

                    <div class="grid grid-cols-3 gap-2 text-xs">

                        <div><label>Focus</label><input type="number" id="focus-duration-input" class="styled-input text-center p-1 mt-1" value="${focus}"></div>

                        <div><label>Short Break</label><input type="number" id="short-break-duration-input" class="styled-input text-center p-1 mt-1" value="${shortBreak}"></div>

                        <div><label>Long Break</label><input type="number" id="long-break-duration-input" class="styled-input text-center p-1 mt-1" value="${longBreak}"></div>

                    </div>

                </div>

                <div>

                    <h4 class="font-bold mb-2">Ambient Sound</h4>

                    <div class="flex justify-start gap-2 flex-wrap">

                        <button onclick="selectAmbientSound('none')" class="p-2 rounded-lg" style="background-color: ${sound === 'none' ? 'var(--accent-tertiary)' : 'var(--bg-secondary)'};"><i data-lucide="volume-x"></i></button>

                        <button onclick="selectAmbientSound('rain')" class="p-2 rounded-lg" style="background-color: ${sound === 'rain' ? 'var(--accent-tertiary)' : 'var(--bg-secondary)'};"><i data-lucide="cloud-rain"></i></button>

                        <button onclick="selectAmbientSound('cafe')" class="p-2 rounded-lg" style="background-color: ${sound === 'cafe' ? 'var(--accent-tertiary)' : 'var(--bg-secondary)'};"><i data-lucide="coffee"></i></button>

                        <button onclick="selectAmbientSound('library')" class="p-2 rounded-lg" style="background-color: ${sound === 'library' ? 'var(--accent-tertiary)' : 'var(--bg-secondary)'};"><i data-lucide="book-open"></i></button>

                        <button onclick="selectAmbientSound('synth')" class="p-2 rounded-lg" style="background-color: ${sound === 'synth' ? 'var(--accent-tertiary)' : 'var(--bg-secondary)'};"><i data-lucide="waves"></i></button>

                    </div>

                </div>

                <div class="flex justify-between items-center"><span class="font-medium">Hard Mode</span><button id="hard-mode-toggle" onclick="toggleHardMode()" class="relative inline-flex h-6 w-11 items-center rounded-full transition-colors" style="background-color: var(--bg-secondary);"><span id="hard-mode-knob" class="inline-block h-4 w-4 transform rounded-full bg-white transition-transform" style="transform: translateX(4px);"></span></button></div>

                <div id="hard-mode-stake-container" class="hidden"> <label class="text-sm font-medium">GP Stake</label> <input type="number" id="hard-mode-stake-input" class="styled-input text-center p-1 mt-1" value="${gameState.timerSettings.hardModeStake}"></div>

                <button onclick="saveTimerSettings()" class="cozy-button w-full !text-sm !py-2 mt-2">Save Settings</button>

            </div>`;

    }

    

    chamberContent.innerHTML = tabsHTML + contentHTML;

    if (tabName === 'timer') {

        selectTimerMode(timerState.mode);

        const toggle = document.getElementById('auto-cycle-toggle');

        const knob = document.getElementById('auto-cycle-knob');

        if (timerState.autoCycleTimer) {

            toggle.style.backgroundColor = 'var(--success-color)';

            knob.style.transform = 'translateX(22px)';

        }

    } else if (tabName === 'settings') {

        const hardModeToggle = document.getElementById('hard-mode-toggle');

        const hardModeKnob = document.getElementById('hard-mode-knob');

        if (gameState.timerSettings.hardModeEnabled) {

            hardModeToggle.style.backgroundColor = 'var(--danger-color)';

            hardModeKnob.style.transform = 'translateX(22px)';

            document.getElementById('hard-mode-stake-container').classList.remove('hidden');

        }

    }

    lucide.createIcons();

}



function showFocusSummary(rewards, nextMode, bonusMessage = null) {

    const message = `You earned +${rewards.exp} EXP and +${rewards.gp} GP. ${rewards.trackExp ? `+${rewards.trackExp} Track EXP!` : ''}`;

    const bonusHTML = bonusMessage ? `<p class="font-bold text-lg" style="color:var(--accent-primary);">${bonusMessage}</p>` : '';

    const nextLabel = nextMode === 'focus' ? 'Start Next Focus' : 'Start Break';



    dom.modalContent.innerHTML = `<div class="text-center">

            <div class="modal-icon">🧠</div>

            <h2 class="text-2xl font-bold mb-2 font-heading">Session Complete!</h2>

            ${bonusHTML}

            <p class="text-md mb-6" style="color: var(--text-secondary);">${message}</p>

            <button onclick="startNextTimerPhase('${nextMode}')" class="cozy-button w-full">${nextLabel}</button>

        </div>`;

    dom.modalContent.classList.add('timer-finished-pulse');

    setTimeout(() => dom.modalContent.classList.remove('timer-finished-pulse'), 1500);

    lucide.createIcons();

}



function startNextTimerPhase(nextMode) {

    switchFocusTab('timer');

    selectTimerMode(nextMode);

    if(timerState.autoCycleTimer) setTimeout(startTimer, 500);

}





function selectAmbientSound(sound) {

    if (timerState.running) playAmbientSound(sound);

    gameState.timerSettings.ambientSound = sound;

    saveData();

    switchFocusTab('settings');

}



function toggleTimerSettings() { document.getElementById('timer-settings').classList.toggle('hidden'); }

function saveTimerSettings() {

    const { timerSettings } = gameState;

    timerSettings.customTimes.focus = parseInt(document.getElementById('focus-duration-input').value) || 25;

    timerSettings.customTimes.shortBreak = parseInt(document.getElementById('short-break-duration-input').value) || 5;

    timerSettings.customTimes.longBreak = parseInt(document.getElementById('long-break-duration-input').value) || 15;

    timerSettings.hardModeStake = parseInt(document.getElementById('hard-mode-stake-input')?.value) || 50;

    saveData();

    showNotification('👍', 'Settings Saved', 'Your new timer settings have been saved.');

}



function toggleAutoCycle() {

    timerState.autoCycleTimer = !timerState.autoCycleTimer;

    const toggle = document.getElementById('auto-cycle-toggle');

    const knob = document.getElementById('auto-cycle-knob');

    if (timerState.autoCycleTimer) {

        toggle.style.backgroundColor = 'var(--success-color)';

        knob.style.transform = 'translateX(22px)';

        playSound("C5", "16n");

    } else {

        toggle.style.backgroundColor = 'var(--bg-secondary)';

        knob.style.transform = 'translateX(4px)';

        playSound("C4", "16n");

    }

}

function toggleHardMode() {

    gameState.timerSettings.hardModeEnabled = !gameState.timerSettings.hardModeEnabled;

    const toggle = document.getElementById('hard-mode-toggle');

    const knob = document.getElementById('hard-mode-knob');

    if (gameState.timerSettings.hardModeEnabled) {

        toggle.style.backgroundColor = 'var(--danger-color)';

        knob.style.transform = 'translateX(22px)';

        document.getElementById('hard-mode-stake-container').classList.remove('hidden');

        playSound("A4", "16n");

    } else {

        toggle.style.backgroundColor = 'var(--bg-secondary)';

        knob.style.transform = 'translateX(4px)';

        document.getElementById('hard-mode-stake-container').classList.add('hidden');

        playSound("E4", "16n");

    }

}



function selectTimerMode(mode) {

    if (timerState.running) return;

    timerState.mode = mode;

    timerState.timeLeft = gameState.timerSettings.customTimes[mode] * 60;

    timerState.totalTime = gameState.timerSettings.customTimes[mode] * 60;

    

    document.getElementById('timer-cycle-display').textContent = timerState.mode === 'focus' ? `Session ${timerState.focusSessionsCompleted + 1}` : 'Time for a break!';

    document.getElementById('flow-cycle-display').textContent = timerState.consecutiveCycles > 0 ? `🔥 Flow Cycle: ${timerState.consecutiveCycles}` : '';

    const circle = document.getElementById('timer-progress-circle');

    if(circle) circle.style.stroke = mode === 'focus' ? 'var(--accent-secondary)' : 'var(--success-color)';

    dom.modal.classList.toggle('focus-mode', mode === 'focus');

    dom.modal.classList.toggle('break-mode', mode !== 'focus');



    updateTimerDisplay();

}



function updateTimerDisplay() {

    const minutes = Math.floor(timerState.timeLeft / 60);

    const seconds = timerState.timeLeft % 60;

    const display = document.getElementById('focus-timer-display');

    if(display) display.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

    

    const circle = document.getElementById('timer-progress-circle');

    if(circle) {

        const radius = circle.r.baseVal.value;

        const circumference = radius * 2 * Math.PI;

        const offset = circumference - (timerState.timeLeft / timerState.totalTime) * circumference;

        circle.style.strokeDasharray = `${circumference} ${circumference}`;

        circle.style.strokeDashoffset = offset;

    }

}



function toggleTimer() { timerState.running ? pauseTimer() : startTimer(); }



function startTimer() {

    if (timerState.running) return;

    

    const select = document.getElementById('focus-task-select');

    const [type, ...ids] = (select?.value || '').split('|');

    if (type === 'quest') { timerState.linkedQuestId = ids[0]; }

    else if (type === 'project') { [timerState.linkedTrackId, timerState.linkedProjectId] = ids; }

    else { timerState.linkedQuestId = null; timerState.linkedProjectId = null; }

    

    if (gameState.timerSettings.hardModeEnabled && timerState.mode === 'focus') {

        const stake = gameState.timerSettings.hardModeStake;

        if (gameState.gp < stake) {

            showNotification('💰', 'Insufficient GP', 'You don\'t have enough GP to stake for Hard Mode.');

            return;

        }

        timerState.isHardMode = true;

        timerState.stakedAmount = stake;

        gameState.gp -= stake;

        showNotification('🔥', 'Hard Mode!', `You've staked ${stake} GP on completing this session.`);

    }



    timerState.running = true;

    playAmbientSound(gameState.timerSettings.ambientSound);

    if (select) select.disabled = true;



    document.getElementById('timer-toggle-btn').innerHTML = `<i data-lucide="pause" class="w-8 h-8"></i>`;

    lucide.createIcons();

    playSound("C4", "16n");



    timerInterval = setInterval(() => {

        timerState.timeLeft--;

        updateTimerDisplay();

        if (timerState.timeLeft <= 0) {

            clearInterval(timerInterval);

            timerInterval = null;

            timerState.running = false;

            stopAmbientSound();

            const currentMode = timerState.mode;

            

            if (currentMode === 'focus') {

                playSound("G5", "4n");

                timerState.consecutiveCycles++;

                timerState.focusSessionsCompleted++;

                let bonusMessage = null;



                if (timerState.isHardMode) {

                    addGp(timerState.stakedAmount);

                    bonusMessage = `Stake of ${timerState.stakedAmount} GP returned!`;

                }

                

                if (timerState.consecutiveCycles >= 4) {

                    gameState.activeEffects.flowStateUntil = Date.now() + 60 * 60 * 1000;

                    timerState.consecutiveCycles = 0;

                    showNotification('🌊', 'Flow State Activated!', 'For the next hour, all EXP & GP gains are increased by 25%!');

                    playSound("C6", "4n");

                }



                const rewardMultiplier = timerState.totalTime / 60 / 25;

                const rewards = { exp: Math.round(15 * rewardMultiplier), gp: Math.round(15 * rewardMultiplier), trackExp: 0 };

                let linkedTaskTitle = "General Focus";



                if (timerState.linkedQuestId) {

                    const task = dailyTasks.find(q => q.id === timerState.linkedQuestId);

                    if (task) {

                        linkedTaskTitle = task.title;

                        completeDailyTask(task.id);

                    }

                } else if (timerState.linkedProjectId) {

                    const track = gameState.masteryTracks[timerState.linkedTrackId];

                    const project = track?.projects.find(p => p.id === timerState.linkedProjectId);

                    if (project) {

                        linkedTaskTitle = project.title;

                        rewards.trackExp = Math.round(10 * rewardMultiplier);

                        track.exp += rewards.trackExp;

                        if (track.exp >= track.expToNext) {

                            track.level++;

                            track.exp -= track.expToNext;

                            track.expToNext = Math.floor(track.expToNext * 1.6);

                            showNotification('🚀', 'Mastery Level Up!', `${track.title} is now Level ${track.level}!`);

                        }

                    }

                }

                

                addExp(rewards.exp); addGp(rewards.gp);

                gameState.focusLog.unshift({ date: new Date().toISOString(), duration: timerState.totalTime / 60, linkedTaskTitle, rewards });

                

                const nextMode = (timerState.focusSessionsCompleted % 4 === 3) ? 'longBreak' : 'shortBreak';

                showFocusSummary(rewards, nextMode, bonusMessage);

            } else { // Break finished

                playSound("C5", "8n");

                if (currentMode === 'longBreak') timerState.consecutiveCycles = 0; // Reset flow cycle after a long break

                addExp(5); addGp(5);

                showFocusSummary({exp:5, gp:5}, 'focus', "Break's Over!");

            }

            timerState.isHardMode = false; timerState.stakedAmount = 0; timerState.linkedQuestId = null; timerState.linkedProjectId = null;

            saveData();

        }

    }, 1000);

}



function abortFocusSession() {

    if(!timerState.running) return;

    pauseTimer();

    if (timerState.mode === 'focus') {

        if (timerState.isHardMode) {

            showNotification('💔', 'Stake Forfeited', `You lost your stake of ${timerState.stakedAmount} GP.`);

        }

        timerState.consecutiveCycles = 0; // Reset flow state on abort

    }

    timerState.isHardMode = false;

    timerState.stakedAmount = 0;

    resetTimer(false);

}



function pauseTimer() {

    timerState.running = false;

    clearInterval(timerInterval);

    timerInterval = null;

    stopAmbientSound();

    const toggleBtn = document.getElementById('timer-toggle-btn');

    if(toggleBtn) toggleBtn.innerHTML = `<i data-lucide="play" class="w-8 h-8"></i>`;

    const select = document.getElementById('focus-task-select');

    if (select) select.disabled = false;

    lucide.createIcons();

    playSound("E4", "16n");

}



function resetTimer(manual = true) {

    if (timerState.running && timerState.isHardMode) {

        showConfirmation('🛑', 'Abort Session?', `You will forfeit your stake of ${timerState.stakedAmount} GP. Are you sure?`, () => {

            abortFocusSession();

             if (manual) timerState.focusSessionsCompleted = 0;

            selectTimerMode('focus');

        });

        return;

    }

    

    abortFocusSession();

    if (manual) timerState.focusSessionsCompleted = 0;

    selectTimerMode(timerState.mode);

}



// --- RECURRING QUESTS ---

function claimRecurringQuest(questId) { const type = questId.charAt(0); const questTypeKey = {'d': 'daily', 'w': 'weekly', 'm': 'monthly', 'y': 'yearly'}[type]; const quest = recurringQuests[questTypeKey].find(q => q.id === questId); if (!quest || gameState.recurringQuestsState[questId]?.claimed) return; addExp(quest.rewards.exp || 0); addGp(quest.rewards.gp || 0); addHp(quest.rewards.hp || 0); if(!gameState.recurringQuestsState[questId]) gameState.recurringQuestsState[questId] = {}; gameState.recurringQuestsState[questId].claimed = true; playSound("B4"); showNotification('⭐', 'Quest Complete!', `You earned ${quest.rewards.exp || 0} EXP and ${quest.rewards.gp || 0} GP!`); saveData(); }

window.updateQuestProgress = (questId, amount = 1) => { if (!gameState.recurringQuestsState[questId]) { gameState.recurringQuestsState[questId] = { progress: 0, claimed: false }; } const state = gameState.recurringQuestsState[questId]; if(state.claimed) return; state.progress = (state.progress || 0) + amount; playSound("E4", "16n"); saveData(); };

function renderRecurringQuests() { ['daily', 'weekly', 'monthly', 'yearly'].forEach(type => { const container = dom[`${type}View`]; container.innerHTML = recurringQuests[type].map(quest => { const state = gameState.recurringQuestsState[quest.id] || { progress: 0, claimed: false }; let progress = quest.tracker ? quest.tracker() : state.progress; const isComplete = progress >= quest.target; const canClaim = isComplete && !state.claimed; const progressPercent = Math.min(100, (progress / quest.target) * 100); let actionButton = `<button class="cozy-button !text-sm !py-1.5" onclick="updateQuestProgress('${quest.id}')">+1 Progress</button>`; if (quest.tracker) { actionButton = `<button class="cozy-button !text-sm !py-1.5" disabled>Auto-Tracked</button>`; } if (canClaim) { actionButton = `<button class="cozy-button !text-sm !py-1.5 !bg-green-500" onclick="claimRecurringQuest('${quest.id}')">Claim Reward</button>`; } else if (state.claimed) { actionButton = `<button class="cozy-button !text-sm !py-1.5" disabled>Claimed</button>`; } return ` <div class="cozy-card p-4 space-y-3 ${state.claimed ? 'opacity-60' : ''}"> <div class="flex items-start gap-3"> <i data-lucide="${quest.icon}" class="w-6 h-6" style="color:var(--accent-primary);"></i> <div> <h4 class="font-bold">${quest.title}</h4> <p class="text-xs" style="color:var(--text-secondary);">${quest.description}</p> </div> </div> <div> <div class="flex justify-between text-xs mb-1" style="color:var(--text-secondary);"> <span>Progress</span> <span>${progress} / ${quest.target}</span> </div> <div class="w-full progress-bar-bg rounded-full h-2"><div class="progress-bar-fill h-2 rounded-full" style="width: ${progressPercent}%; background: var(--accent-secondary);"></div></div> </div> <div class="flex justify-between items-center text-xs"> <span class="font-semibold px-2 py-1 rounded" style="background-color: var(--bg-secondary);">🎁 ${quest.rewards.exp} EXP, ${quest.rewards.gp} GP</span> ${actionButton} </div> </div> `; }).join(''); }); lucide.createIcons(); }



// --- GACHAPON LOGIC ---

function pullGachapon(bannerId) {

    const banner = gameState.gachapons[bannerId];

    if (!banner || gameState.gp < banner.cost) return;



    // Relic check for free pull

    const foxCharm = gameState.relics.equipped.find(r => r.value.type === 'gacha_cost_redux');

    if (foxCharm && Math.random() < foxCharm.value.amount) {

        showNotification('🦊', 'Fox Luck!', 'Your Trickster Fox Charm activated, making this pull free!');

    } else {

        gameState.gp -= banner.cost;

    }

    

    playSound("C4", "8n");



    const rarityWeights = { common: 60, uncommon: 25, rare: 12, epic: 3 };

    const weightedList = banner.lootTable.flatMap(item => Array(rarityWeights[item.rarity] || 0).fill(item));

    const prize = weightedList[Math.floor(Math.random() * weightedList.length)];



    processGachaPrize(prize);

    showGachaponResult(prize);

    saveData();

}

window.pullGachapon = pullGachapon;



function processGachaPrize(prize) {

    switch (prize.type) {

        case 'gp': addGp(prize.value); break;

        case 'exp': addExp(prize.value); break;

        case 'consumable': gameState.inventory.push({ ...prize, isConsumable: true }); break;

        case 'relic': 

            const existingRelic = gameState.relics.equipped.find(r => r.id === prize.id);

            if (!existingRelic) gameState.relics.equipped.push(prize);

            else { 

                showNotification('✨', 'Duplicate Relic', `You already own the ${prize.name}. You received a compensation of 500 GP instead.`); 

                addGp(500);

            }

            break;

    }

}



function showGachaponResult(item) {

    dom.modalContent.innerHTML = `

        <div class="text-center p-4">

            <div class="gacha-reveal-item">

                <div class="w-24 h-24 rounded-full flex items-center justify-center mx-auto mb-4" style="background-color:var(--bg-secondary);">

                     <i data-lucide="${item.icon}" class="w-12 h-12 rarity-${item.rarity}"></i>

                </div>

                <p class="rarity-label text-sm rarity-${item.rarity}">${item.rarity}</p>

                <h2 class="text-2xl font-bold font-heading my-2">${item.name}</h2>

            </div>

            <button onclick="closeModal()" class="cozy-button w-full mt-6">Awesome!</button>

        </div>

    `;

    dom.modal.classList.add('visible');

    lucide.createIcons();

}



function showItemInfo(itemIndex) {

    const item = gameState.inventory[itemIndex];

    let description = item.description || "A mysterious item.";

    if (item.isConsumable && !item.description) {

        if(item.value.type === 'hp') description = `Restores ${item.value.amount} HP upon use.`;

        else if(item.value.type === 'skip_task') description = `Instantly completes one of your daily tasks.`;

        else if(item.value.type === 'skill_exp') description = `Grants ${item.value.amount} EXP to your ${item.value.skill.charAt(0).toUpperCase() + item.value.skill.slice(1)} skill.`;

    }

    

    dom.modalContent.innerHTML = `

        <div class="text-center">

            <div class="w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4" style="background-color:var(--bg-secondary);">

                 <i data-lucide="${item.icon}" class="w-8 h-8" style="color:var(--accent-primary);"></i>

            </div>

            <h2 class="text-xl font-bold font-heading mb-2">${item.name}</h2>

            <p class="text-sm mb-4" style="color:var(--text-secondary);">${description}</p>

            ${item.isConsumable ? `<button id="use-item-btn" class="cozy-button w-full">Use Item</button>` : ''}

            <button onclick="closeModal()" class="w-full text-center py-2 mt-2 text-sm" style="color:var(--text-secondary);">Close</button>

        </div>

    `;

    dom.modal.classList.add('visible');

    if (item.isConsumable) {

        document.getElementById('use-item-btn').onclick = () => useItem(itemIndex);

    }

    lucide.createIcons();

}

window.showItemInfo = showItemInfo;



function showRelicInfo(relicIndex) {

    const relic = gameState.relics.equipped[relicIndex];

     dom.modalContent.innerHTML = `

        <div class="text-center">

            <div class="w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4" style="background-color:var(--bg-secondary);">

                 <i data-lucide="${relic.icon}" class="w-8 h-8 rarity-${relic.rarity}"></i>

            </div>

            <p class="rarity-label text-sm rarity-${relic.rarity}">${relic.rarity}</p>

            <h2 class="text-xl font-bold font-heading my-2">${relic.name}</h2>

            <p class="text-sm mb-4" style="color:var(--text-secondary);">${relic.description}</p>

            <button onclick="closeModal()" class="cozy-button w-full">Close</button>

        </div>

    `;

    dom.modal.classList.add('visible');

    lucide.createIcons();

}

window.showRelicInfo = showRelicInfo;



function activateRelic(relicIndex) {

    const relic = gameState.relics.equipped[relicIndex];

    if (!relic || !relic.isActive) return;



    const now = Date.now();

    const cooldownEnd = (relic.lastUsed ? new Date(relic.lastUsed).getTime() : 0) + (relic.cooldown * 1000);



    if (now < cooldownEnd) {

        showNotification('⏳', 'On Cooldown', `This relic is not ready yet. Please wait.`);

        return;

    }



    if (relic.value.type === 'active_double_gp') {

        if (gameState.hp <= 2) {

            showNotification('💔', 'Not Enough HP', 'You need more than 2 HP to use this ability.');

            return;

        }

        showConfirmation('🩸', 'Use Astarion\'s Dagger?', 'Sacrifice 2 HP to double the GP from your next completed quest?', () => {

            gameState.hp -= 2;

            gameState.activeEffects.doubleGpNextQuest = true;

            relic.lastUsed = new Date().toISOString();

            showNotification('🗡️', 'Ability Activated', 'Your next quest will grant double GP. The shadows hunger...');

            saveData();

        });

    } else if (relic.value.type === 'active_complete_focus') {

        if (!timerState.running || timerState.mode !== 'focus') {

            showNotification('🧠', 'Not Focusing', 'You must be in an active Focus session to use this scroll.');

            return;

        }

        showConfirmation('📜', 'Use Scroll of Focus?', 'Instantly complete your current focus session and gain its rewards?', () => {

            relic.lastUsed = new Date().toISOString();

            timerState.timeLeft = 1; // Set to 1 to trigger completion on next interval

            showNotification('⚡', 'Time Accelerated!', 'Your focus session will complete momentarily.');

            saveData();

        });

    }

}

window.activateRelic = activateRelic;



function useItem(itemIndex) {

    const item = gameState.inventory[itemIndex];

    if (!item || !item.isConsumable) return;



    if (item.value.type === 'hp') {

        addHp(item.value.amount);

        showNotification('💖', 'Wellness Restored!', `You recovered ${item.value.amount} HP.`);

    } else if (item.value.type === 'skip_task') {

        const taskToSkip = dailyTasks.find(t => !gameState.completedDailyTasks.includes(t.id));

        if (taskToSkip) {

            completeDailyTask(taskToSkip.id);

            showNotification('⚡', 'Task Completed!', `You used the scroll to complete "${taskToSkip.title}"!`);

        } else {

            showNotification('🤔', 'No Tasks Left', `You've already completed all your tasks for today!`);

            return; // Don't consume the item

        }

    } else if (item.value.type === 'skill_exp') {

        const skill = gameState.skills[item.value.skill];

        if(skill) {

            skill.exp += item.value.amount;

            showNotification('💡', 'Skill Boosted!', `Your ${item.value.skill} skill gained ${item.value.amount} EXP.`);

        }

    }



    gameState.inventory.splice(itemIndex, 1);

    playSound("A4");

    saveData();

    closeModal();

}



// --- MIND PALACE ---

function renderMindPalace() {

    dom.mindPalaceContainer.innerHTML = (gameState.mindPalaceEntries || []).map(entry => `

        <div class="cozy-card p-4">

            <div class="flex justify-between items-start">

                <div>

                    <h4 class="font-bold font-heading text-lg">${entry.title}</h4>

                    <div class="flex flex-wrap gap-2 mt-1 mb-3">${(entry.tags || '').split(',').map(tag => tag.trim() ? `<span class="text-xs font-semibold px-2 py-1 rounded-full mind-palace-tag">${tag.trim()}</span>` : '').join('')}</div>

                </div>

                <div>

                    <button onclick="showMindPalaceEntryModal('${entry.id}')" class="text-gray-400 hover:text-blue-500 p-1"><i data-lucide="edit"></i></button>

                    <button onclick="deleteMindPalaceEntry('${entry.id}')" class="text-gray-400 hover:text-red-500 p-1"><i data-lucide="trash-2"></i></button>

                </div>

            </div>

            <p class="text-sm whitespace-pre-wrap" style="color: var(--text-secondary);">${entry.content}</p>

        </div>

    `).join('') || `<p class="text-center text-sm" style="color:var(--text-secondary);">Your Mind Palace is empty. Create a new entry to store your thoughts and learnings.</p>`;

    lucide.createIcons();

}



window.showMindPalaceEntryModal = (entryId = null) => {

    const entry = entryId ? gameState.mindPalaceEntries.find(e => e.id === entryId) : null;

    const isEditing = entry !== null;

    dom.modalContent.innerHTML = `

        <h2 class="text-2xl font-bold mb-4 font-heading">${isEditing ? 'Edit Entry' : 'New Mind Palace Entry'}</h2>

        <form id="mind-palace-form" class="space-y-4 text-left">

            <input type="hidden" name="id" value="${isEditing ? entry.id : ''}">

            <div>

                <label class="text-sm font-medium">Title</label>

                <input type="text" name="title" placeholder="Concept or Idea" class="styled-input mt-1" value="${isEditing ? entry.title : ''}" required>

            </div>

            <div>

                <label class="text-sm font-medium">Tags (comma-separated)</label>

                <input type="text" name="tags" placeholder="Linguistics, GMAT, HBR..." class="styled-input mt-1" value="${isEditing ? entry.tags : ''}">

            </div>

            <div>

                <label class="text-sm font-medium">Content</label>

                <textarea name="content" placeholder="Synthesize your knowledge..." class="styled-textarea mt-1">${isEditing ? entry.content : ''}</textarea>

            </div>

            <button type="submit" class="cozy-button w-full !mt-6">Save Entry</button>

        </form>

    `;

    dom.modal.classList.add('visible');

    document.getElementById('mind-palace-form').addEventListener('submit', handleSaveMindPalaceEntry);

};



function handleSaveMindPalaceEntry(e) {

    e.preventDefault();

    const form = e.target;

    const entryData = {

        id: form.elements.id.value || `mp_${Date.now()}`,

        title: form.elements.title.value,

        tags: form.elements.tags.value,

        content: form.elements.content.value,

    };

    

    const existingIndex = gameState.mindPalaceEntries.findIndex(e => e.id === entryData.id);

    if (existingIndex > -1) {

        gameState.mindPalaceEntries[existingIndex] = entryData;

    } else {

        gameState.mindPalaceEntries.unshift(entryData);

        // Bonus for creating a new entry from a reading quest

        if (gameState.completedDailyTasks.includes('er_01') || gameState.completedDailyTasks.includes('er_02')) {

            addExp(10);

            showNotification('💡', 'Synthesis Bonus!', 'You earned +10 EXP for synthesizing what you read!');

        }

    }

    playSound("D4");

    saveData();

    closeModal();

}

window.deleteMindPalaceEntry = (entryId) => {

    showConfirmation('🗑️', 'Delete Entry?', 'Are you sure you want to delete this memory from your Mind Palace?', () => {

        gameState.mindPalaceEntries = gameState.mindPalaceEntries.filter(e => e.id !== entryId);

        playSound("C3");

        saveData();

    });

}





// --- MAIN UI UPDATE & NAVIGATION ---

function updateUI() { 

    if (!gameState) return; 

    dom.level.textContent = `Level ${gameState.level} Applicant`; 

    dom.expValue.textContent = `${gameState.exp}/${gameState.expToNextLevel}`; 

    dom.expBar.style.width = `${(gameState.exp / gameState.expToNextLevel) * 100}%`; 

    dom.hpValue.textContent = `${gameState.hp}/${gameState.maxHp}`; 

    dom.hpBar.style.width = `${(gameState.hp / gameState.maxHp) * 100}%`; 

    dom.gpValue.textContent = (gameState.gp || 0).toLocaleString(); 



    // Skills

    const { art, eng, fin, social } = gameState.skills;

    dom.artLevel.textContent = `Lv. ${art.level}`; dom.artBar.style.width = `${(art.exp / art.expToNext) * 100}%`;

    dom.engLevel.textContent = `Lv. ${eng.level}`; dom.engBar.style.width = `${(eng.exp / eng.expToNext) * 100}%`;

    dom.finLevel.textContent = `Lv. ${fin.level}`; dom.finBar.style.width = `${(fin.exp / fin.expToNext) * 100}%`;

    dom.socialLevel.textContent = `Lv. ${social.level}`; dom.socialBar.style.width = `${(social.exp / social.expToNext) * 100}%`;



    // Modes

    dom.restDayBtn.textContent = gameState.isRestDay ? "End Rest Day" : "Activate Rest Day"; 

    dom.restDayBtn.style.backgroundColor = gameState.isRestDay ? 'var(--accent-secondary)' : 'var(--bg-secondary)'; 

    dom.restDayBtn.style.color = gameState.isRestDay ? 'white' : 'var(--text-secondary)'; 



    dom.gremlinModeBtn.textContent = gameState.isGremlinMode ? "End Gremlin Mode" : "Gremlin Mode";

    dom.gremlinModeBtn.style.backgroundColor = gameState.isGremlinMode ? 'var(--accent-secondary)' : 'var(--bg-secondary)';

    dom.gremlinModeBtn.style.color = gameState.isGremlinMode ? 'white' : 'var(--text-secondary)';



    // Flow State Visual Indicator

    if (gameState.activeEffects.flowStateUntil && Date.now() < gameState.activeEffects.flowStateUntil) {

        dom.fabBtn.classList.add('flow-state-active');

    } else {

        dom.fabBtn.classList.remove('flow-state-active');

    }



    renderDailyTasks(); 

    renderQuestChains();

    renderFinancialSummary(); 

    renderTransactionList(); 

    updateExpenseChart(); 

    renderSloanFund(); 

    renderRewards(); 

    renderGachapons();

    renderInventory();

    renderRelics();

    renderCalendar(); 

    renderAgenda(selectedDate); 

    renderRecurringQuests(); 

    renderMasteryTracks(); 

    renderStatsSnapshot(); 

    renderThemeSelector();

    renderMindPalace();

    lucide.createIcons(); 

}

window.changeTab = (tabName) => { document.querySelectorAll('.page').forEach(p => p.classList.add('hidden')); const activePage = document.getElementById(`${tabName}-tab`); if(activePage) { activePage.classList.remove('hidden'); activePage.style.animation = 'none'; activePage.offsetHeight; activePage.style.animation = null; } document.querySelectorAll('.nav-button').forEach(b => b.classList.remove('active')); document.querySelector(`.nav-button[onclick="changeTab('${tabName}')"]`).classList.add('active'); if (tabName === 'agenda') selectDate(dateToISO(new Date())); document.getElementById('content-area').scrollTop = 0; };

window.changeQuestView = (viewName) => { document.querySelectorAll('.quest-view').forEach(v => v.classList.add('hidden')); document.getElementById(`${viewName}-view`).classList.remove('hidden'); document.querySelectorAll('.quest-view-tab').forEach(b => b.classList.remove('active')); document.getElementById(`${viewName}-view-btn`).classList.add('active'); };

window.changeMonth = (delta) => { calendarDate.setMonth(calendarDate.getMonth() + delta); renderCalendar(); }

window.setTransactionType = (type) => { currentTransactionType = type; dom.incomeTabBtn.classList.toggle('active', type === 'income'); dom.expenseTabBtn.classList.toggle('active', type === 'expense'); dom.incomeTabBtn.style.color = type === 'income' ? 'var(--accent-primary)' : 'var(--text-secondary)'; dom.expenseTabBtn.style.color = type === 'expense' ? 'var(--accent-primary)' : 'var(--text-secondary)'; dom.transactionCategory.style.display = type === 'expense' ? 'block' : 'none'; dom.transactionSubmitBtn.textContent = type === 'expense' ? 'Add Expense' : 'Add Income'; };

window.deleteTransaction = (index) => { const transaction = gameState.finances.transactions[index]; showConfirmation('🗑️', 'Delete Transaction?', `Delete "${transaction.desc}"?`, () => { playSound("C3"); gameState.finances.transactions.splice(index, 1); saveData(); }); }

window.confirmClaimReward = (index) => { 

    const sortedRewards = (gameState.rewards || []).sort((a, b) => a.cost - b.cost);

    const r = sortedRewards[index];

    if (gameState.gp < r.cost) return; 

    showConfirmation('🎁', 'Claim Reward?', `Spend ${r.cost} GP on "${r.name}"?`, () => claimReward(r)); 

}

const claimReward = (reward) => { 

    if (gameState.gp < reward.cost) return; 

    gameState.gp -= reward.cost; 

    let msg = `Enjoy your "${reward.name}"!`; 

    if (reward.type === 'hp_heal') { 

        let hpGain = reward.value;

        // Relic checks

        const joyconRelic = gameState.relics.equipped.find(relic => relic.value.type === 'hp_gaming_bonus');

        if(joyconRelic && (reward.name.includes('Splatoon') || reward.name.includes('Sims') || reward.name.includes('Baldur\'s'))) {

            hpGain += joyconRelic.value.amount;

        }

        const headphoneRelic = gameState.relics.equipped.find(relic => relic.value.type === 'hp_music_bonus');

        if(headphoneRelic && reward.name.includes('Soundtrack')) {

            hpGain += headphoneRelic.value.amount;

        }

        const artRelic = gameState.relics.equipped.find(relic => relic.value.type === 'art_hp_chance');

        if(artRelic && reward.name.includes('Art') && Math.random() < artRelic.value.chance) {

            hpGain += 2;

        }



        if (hpGain >= 999) { gameState.hp = gameState.maxHp; msg += ` Wellness is full.`; } 

        else { addHp(hpGain); msg += ` +${hpGain} Wellness.`; } 

    } else if (reward.type === 'item') { 

        gameState.inventory.push({ name: reward.name, icon: reward.icon }); 

        msg += ` Added to your inventory as a voucher.` 

    } 

    playSound("A4"); 

    showNotification('🎉', 'Reward Claimed!', msg); 

    saveData(); 

}

window.showSkillTree = (skill) => { const skillData = gameState.skills[skill]; const skillName = skill.charAt(0).toUpperCase() + skill.slice(1); let perksHTML = skillTrees[skill].map(perk => { const isUnlocked = skillData.unlockedPerks?.includes(perk.id); return `<div class="flex items-start gap-3 p-2 rounded-lg ${isUnlocked ? 'opacity-100' : 'opacity-40'}"> <i data-lucide="award" class="w-5 h-5 ${isUnlocked ? 'text-yellow-500' : 'text-gray-400'} mt-1"></i> <div> <p class="font-bold text-sm">${perk.name} <span class="text-xs font-normal text-gray-500">- Unlocks at Lv. ${perk.level}</span></p> <p class="text-xs" style="color:var(--text-secondary);">${perk.description}</p> </div> </div>` }).join(''); dom.modalContent.innerHTML = `<div class="text-left"><h2 class="text-xl font-bold mb-4 text-center font-heading">${skillName} Skill Tree</h2><div class="space-y-2">${perksHTML}</div><button onclick="closeModal()" class="cozy-button mt-6 w-full">Close</button></div>`; lucide.createIcons(); dom.modal.classList.add('visible'); }



// --- DRAGGABLE FAB LOGIC ---

function initDraggableFab() {

    const fab = document.getElementById('fab-btn');

    const phoneScreen = document.getElementById('phone-screen');



    fab.style.top = 'calc(100% - 130px)';

    fab.style.left = 'calc(100% - 75px)';



    function onDragStart(e) {

        fabDraggable.isDragging = true;

        fabDraggable.hasMoved = false;

        fab.style.transition = 'none';



        const event = e.type === 'touchstart' ? e.touches[0] : e;

        fabDraggable.startX = event.clientX;

        fabDraggable.startY = event.clientY;

        fabDraggable.initialLeft = fab.offsetLeft;

        fabDraggable.initialTop = fab.offsetTop;



        document.addEventListener('mousemove', onDragMove);

        document.addEventListener('touchmove', onDragMove, { passive: false });

        document.addEventListener('mouseup', onDragEnd);

        document.addEventListener('touchend', onDragEnd);

    }



    function onDragMove(e) {

        if (!fabDraggable.isDragging) return;

        e.preventDefault();



        const event = e.type === 'touchmove' ? e.touches[0] : e;

        const dx = event.clientX - fabDraggable.startX;

        const dy = event.clientY - fabDraggable.startY;

        

        if (Math.abs(dx) > 5 || Math.abs(dy) > 5) {

             fabDraggable.hasMoved = true;

        }



        let newLeft = fabDraggable.initialLeft + dx;

        let newTop = fabDraggable.initialTop + dy;

        

        const rect = phoneScreen.getBoundingClientRect();

        const fabRect = fab.getBoundingClientRect();

        

        newLeft = Math.max(0, Math.min(newLeft, phoneScreen.clientWidth - fabRect.width));

        newTop = Math.max(0, Math.min(newTop, phoneScreen.clientHeight - fabRect.height));



        fab.style.left = `${newLeft}px`;

        fab.style.top = `${newTop}px`;

    }



    function onDragEnd() {

        if (!fabDraggable.isDragging) return;

        fabDraggable.isDragging = false;

        fab.style.transition = 'all 0.2s ease-out';



        document.removeEventListener('mousemove', onDragMove);

        document.removeEventListener('touchmove', onDragMove);

        document.removeEventListener('mouseup', onDragEnd);

        document.removeEventListener('touchend', onDragEnd);

        

        setTimeout(() => { fabDraggable.hasMoved = false; }, 0);

    }



    fab.addEventListener('mousedown', onDragStart);

    fab.addEventListener('touchstart', onDragStart);

    fab.addEventListener('click', () => {

        if (!fabDraggable.hasMoved) {

            showFocusModal();

        }

    });

}



window.completeDailyTask = completeDailyTask; 

window.showGuide = showGuide; window.closeModal = closeModal; window.selectDate = selectDate; window.toggleEventCompletion = toggleEventCompletion; window.deleteEvent = deleteEvent; window.showAddEventModal = showAddEventModal; window.claimRecurringQuest = claimRecurringQuest; window.showProjectsModal = showProjectsModal; window.completeProject = completeProject; window.showFocusModal = showFocusModal; window.selectTimerMode = selectTimerMode; window.toggleTimer = toggleTimer; window.resetTimer = resetTimer; window.toggleAutoCycle = toggleAutoCycle; window.toggleTimerSettings = toggleTimerSettings; window.saveTimerSettings = saveTimerSettings; window.selectAmbientSound = selectAmbientSound; window.switchFocusTab = switchFocusTab; window.startNextTimerPhase = startNextTimerPhase; window.toggleHardMode = toggleHardMode;



// --- EVENT LISTENERS ---

dom.transactionForm.addEventListener('submit', e => { e.preventDefault(); const desc = dom.transactionForm.elements['transaction-desc'].value; const amount = parseInt(dom.transactionForm.elements['transaction-amount'].value); const category = currentTransactionType === 'expense' ? dom.transactionForm.elements['transaction-category'].value : 'Salary'; if (desc && amount > 0) { gameState.finances.transactions.unshift({ type: currentTransactionType, desc, amount, category, date: dateToISO(new Date()) }); if (currentTransactionType === 'expense') { const today = dateToISO(new Date()); if (!gameState.questCounters.expenseTrackedDays.includes(today)) { gameState.questCounters.expenseTrackedDays.push(today); } } playSound(currentTransactionType === 'income' ? "G4" : "E3"); saveData(); dom.transactionForm.reset(); } });

dom.savingsForm.addEventListener('submit', e => { e.preventDefault(); const a = parseInt(dom.savingsForm.elements['savings-amount'].value); if(a>0) { gameState.finances.mitSloanFund+=a; gameState.finances.transactions.unshift({type: 'savings', desc: 'Sloan Fund Deposit', amount: a, category: 'Savings', date: dateToISO(new Date()) }); updateQuestCounter('sloanDeposits'); playSound("A4", "16n"); saveData(); } dom.savingsForm.reset(); });



// --- INITIALIZE APP ---

async function init() {

    appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

    const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');

    if (!firebaseConfig.projectId) { console.error("Firebase config is missing projectId. App cannot initialize."); dom.loadingOverlay.innerHTML = '<p class="text-red-500 text-center p-4">Firebase initialization failed.<br>Missing project configuration.</p>'; return; }

    const app = initializeApp(firebaseConfig);

    db = getFirestore(app);

    setLogLevel('Debug'); // Provides more detailed logs for development

    auth = getAuth(app);

    setupAmbientSounds();

    onAuthStateChanged(auth, async user => {

        if (unsubscribe) unsubscribe(); // Always clear previous listener

        if (user) {

            userId = user.uid;

            isInitialLoad = true; // Reset flag for new user session

            const userDocRef = doc(db, "artifacts", appId, "users", userId, "game", "state");

            unsubscribe = onSnapshot(userDocRef, handleDataSnapshot, err => console.error("Snapshot error:", err));

        } else {

            userId = null;

            isInitialLoad = true;

            // Handle logged out state

            dom.loadingOverlay.style.opacity = '0';

            setTimeout(() => dom.loadingOverlay.style.display = 'none', 300);

        }

    });

    try { if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) { await signInWithCustomToken(auth, __initial_auth_token); } else { await signInAnonymously(auth); } } catch (error) { console.error("Authentication failed:", error); dom.loadingOverlay.innerHTML = '<p class="text-red-500">Auth Error. Please refresh.</p>'; }

    setTransactionType('expense');

    updateClock(); setInterval(updateClock, 1000);

    initDraggableFab();

}



window.onload = init;

</script>

</body>

</html>
